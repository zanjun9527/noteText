渡一 姬成

下个要看	 完成

编程形式的区别

面向过程
	分步执行，步骤分解，任务分解

面向对象


display:none 	连位置都不占

var aa = window.prompt("请您输入一个数字");   调用系统默认的弹出输入框
document.write(aa);   浏览器输出
console.log  一般推荐控制台输出

浏览器的组成
	1.shell部分，外壳
	2.内核部分
		渲染引擎	语法规则和渲染
		js引擎		chrome 用的是v8引擎，可直接将js代码转为机械码执行，速度块
		其他模块
		
	.java-->javac-->编译-->.class--->jvm-->解释执行，不是解释性语言
		
	js的特点(轮转时间片)
		解释性语言，(不需要编译成文件)跨平台
		单线程
		使用ECMA标准
		
	js的三大部分
		ECMAScript，DOM，BOM
		
	主流浏览器
		ie(trident),chrome(webkit/blink),firefox(Gecko),opera(presto)，safari(webkit)
				
		
	引入方式 1.页面级 <script type="text/javascript">  2.<script type="text/javascript" src=""> 引入外部文件


	前端相关
		1.在js脚本加载之后，会先通篇检查是否存在低级错误,有错误，则不编译执行；
		2.在语法检测完之后，便进行全局预编译(包括变量声明提前和函数声明提前)；
		3.在全局预编译之后，就解释一行，执行一行(解释执行)；
		4.当执行到函数调用那一行，会先进行函数预编译，再往下执行。
		
		window.c    点任何不存在的对象都会是undefined
		隐式全局变量 不会被提前，这个要注意。只有变量声明会提前。不要用隐式全局变量，不推荐用。
		一般来说，不用隐式全局变量，按照执行顺序，不重名形参和实参，基本就是老方法执行

		使用原型prototype，对象的父类属性在_proto_属性中可以看到，console直接显示的是子类的属性
		一般情况下不要使用暗示全局变量(隐式全局变量)
		对象的__proto__指向自己构造函数的prototype,     __proto__===constructor.prototype
		实现继承，就是将构造函数的原型prototype指向一个父类的实例。
		
	js基本语法
		变量申明，再赋值 	var a=100;     也可以批量声明变量   注意不能使用关键字
		语句最后要分号结束
		js语法错误会引发后续代码终止，但不会影响其他js代码块(<script>块)
		***错误只影响当前的js块***
		
		引用值copy过去的是地址，数组是引用值
		
		原始值  stack     	number string  boolean undefined null
		引用值	heap		array  object function	...date regexp
		
		js运算符
			任何数据类型加字符串都等于字符串
			优先级=最弱，()优先级较高
			
			NaN 不是一个Number
			
			子串的比较大小，比较的是ASC码
			
			undefined,null，NaN，“”,0,false==》false
			
			逻辑运算符 && ||
			js中，如果是表达式1 && 表达式2  ，如果1真，直接返回2的值.多个表达式，规则一样。一般以前常规用即可
			用法：短路语句：data && 执行一个语句，会用到data
			
			swith case    记得要使用break终止，不使用就会往下漏执行
			
		初始值引用
			数组arr		js数组中 是可以混搭类型存入的。
			对象obj		
				var obj = {
					name : "deng"，
					age : 40,
					cc : undefined,
					handsome : true
				}
			取值/赋值  obj.name=
			
		typeof()  操作符     返回对象类型
			注意这个返回值是String类型的。 number string boolean object undefined function
			数组和null都会返回object
			typeof(a)   返回undefined，其他情况使用未定义变量会报错
			
	
	类型转换
		显式类型转换
			Number()   		转为数字，转undefined  就会变成NaN。转null是0
			parseInt()		这个参数只能是数字。从数字位开始到非数字位结束返回，这样特殊用法 可以取100px的整数部分
			parseFloat()
			toString()		有个进制参数，一般不用。 obj.toString()   undefined 和null不能使用。任何数据+空串都是字符串
			String()		转为字符串
			Boolean()
			
		隐式类型转换
			isNaN(),+,>等
			isNaN() 内部使用了Number()，那么isNaN("abc")  这个会返回true
			1=="1",1==true都是true 是有隐式类型转换的     使用强等于=== 和 !==
			
			
	函数，作用域
	
	console 相当于在js最后又添加了一个<scirpt>作为输出
	
		函数定义(函数声明+函数表达式)
			1.函数声明：		function test() {}
			2.命名函数表达式	var test = function abc() {}        
			3.匿名函数表达式	var test = function () {}			用的多，简称函数表达式
			
		参数(形参，实参。特点:不定参)，
			不定参，参数不限制位数，数量不用对齐，按顺序排即可。形参和实参按顺序排即可，不定数量
			function sum(a,b){}     
				每个函数中 都有一个 arguments[],用来存储实参。
				sum.length 是形参的长度
			
			 arguments是绑定映射关系，但是不是同一个变量。同变。参数位数要对上才行
			
			函数return是终止返回，
			
			写switch要注意break。不然会往下漏。
			var num="123";  字符串num[0]能直接取字符
			
		递归，预编译
			js运行三个步骤
				1.语法分析
				2.预编译
				3.解释执行
			
			 一般也不会未声明就使用变量，规范点就没这事
				1.暗示全局变量：任何变量未经声明就赋值，变量为全局对象所有(window)
				2.一切声明的全局变量，全是window的属性	
			
			
				预编译
					函数体系中，发生在函数执行的前一刻，先预编译，后按顺序解释执行。
					
					*****
						函数声明整体提升；
						变量  声明提升
					*****
					
					预编译的四个步骤
					AO：activation object 
					GO：global object
					***常规的没有重名和未定义的特殊情况，一般不用细考虑***
					先生成GO,再AO。
						在函数体系中
							1.创建AO对象，即执行期上下文
							2.找形参和变量声明，将变量和形参名作为AO属性名，值为undefined。注意是声明，赋值没动
							3.将实参值和形参统一
							4.在函数体里面找到函数声明，值赋予函数体
							
						全局
							1.生成GO对象，就是window对象
							2.顺序按需同上
						
					
					
					
			作用域，作用域链
				作用域[[scope]],其中存储了一个作用域链(执行期上下文对象的集合，呈链式连接)
				***** 
				scope chain 作用域链，自己的优先放在链的顶端使用即scope[0].实现了子类覆盖父类的属性。子继承父(继承的是引用)，并且覆盖父
				*****
					函数也是一个对象，对象就有属性.每次执行都有一个执行期上下文，函数执行要遵循作用域链
					函数每执行一次就创建一个临时的独立的执行上下文AO,执行完毕上下文销毁
					
			立即执行函数
				定义：此类函数没有声明，一次执行后即释放。适合做初始化工作
				立即执行函数:只执行一次，针对初始化功能。执行完就被释放	
					(function (){...}())  可以又参数和返回值
			
			
				只有表达式才能被执行符号()执行
				
			闭包；简单看看后续有空再详看，
				闭包的抽象概念：内部的函数被保存到了外部，一定生成闭包
				那么保存到外部的函数共享父级的变量，这个共享很关键
				
				闭包造成：生成的作用域链不释放，造成内存泄露
			
				闭包的作用：	
					实现公有变量
					可以做缓存
					可以实现封装，属性私有化
					模块化开发，防止污染全局变量
					
		对象、包装类
			js中的单双引号都行
			var obj={
				name:"deng",
				age:12
			
			}
				js对象中属性名加引号和不加引号是都可以的，效果是一样的。
				但是对于不符合规范的属性名必须要加引号，json对象是必须要加的
				
				属性的增删改
					obj.newShuXing="tianjia"
					delete obj.shuxing
					
				对象的创建方法
					1.var obj={}
					2.构造函数  1).系统自带的构造函数 Object()  2).自定义构造函数(也是new出来)
						var  obj= new Object()
				
				
				大小驼峰命名规则   TheFirstName,theFirstName 
				
				
				new 构造函数内部如果显式返回，不能返回基本数据类型，只能是对象
				
				new Number(4).len=3     用完就delete
				
			不 new  构造函数内this就指向window，new就指向构造的对象
				
				构造函数的内部原理
					相当于函数内部隐式创建了一个this对象，var this={}，最后再return出去
					1.函数体最前面隐式加上this={}
					2.执行this.xxx=xxx;
					3.隐式返回this
					
					
		原型，原型链，call和apply方法
				原型是function对象的一个属性，一般用在构造函数中，用来继承该原型的属性和方法
				后代无法更改原型的属性
				对象的__proto__就是其构造函数的原型Prototype
				
				
				*****原型必须要是一个对象*****
				
				原型的构造函数内，var this ={_proto_:Person.prototype}
				
				var obj1={}; 推荐这个  和var obj2 = new Object(); 效果是一样的
				
				
				引用对象，如果是同一个对象，其他引用也会更新，如果不是同一个对象，其他的不受影响
				
				var obj = Object.create(原型);
				
				
				任何能toString()的都是有包装类或者是对象，最终有Object.prototype，才能有toString方法
				
				
				绝大多数对象顶层都有obj的原型，  Object.create(null)除外
				Number.prototype._proto_=Object.prototype
				
				
				Object.prototype.toString.call(123);  对象直接调用指定的原型方法
				
					function test(){};
						test()  等价于test.call()
						
						test.call(obj)  这个可以改变构造函数中this的指向

				总结，call和apply都可以改变this的指向，区别是传参形式不同(都要传入自身对象)，相当于借用别人的方法实现自己功能
			
			
			
		继承，空间命名，对象枚举
		
		
		
		
	闭包还可以实现变量私有化
		
			继承就几种方式
				1.传统形式-原型链，过多继承了没用的属性
				2.借用构造函数（call 和apply），不能继承借用构造函数的原型，每次构造函数都要多走一个函数
				3.共享原型，不能随便改动自己的原型(公用的同一个原型)
					Target.prototype=Origin.prototype            
				4.圣杯模式  推荐使用   F是一个中间层
						function inherit(Target,Origin){
							function F(){};
							F.prototype=Origin.prototype;
							Target.prototype=new F();
							Target.prototype.constuctor=Target;
							Target.prototype.uber=Origin.prototype;
						}
						
					优化版本,利用闭包实现变量私有化
						var inherit=(function (){
							var F=function () {};
							return function inherit(Target,Origin){
								F.prototype=Origin.prototype;
								Target.prototype=new F();
								Target.prototype.constuctor=Target;
								Target.prototype.uber=Origin.prototype;
							}
						}());
						
			命名空间
				管理变量，防止污染全局，使用模块化开发
				
				使用立即执行函数创建私有化变量(闭包特性),避免变量冲突
				
				var init=(function (){
							var name="abc";							
							function callName(){
								console.log(name);
							}
							return function (){
								callName();
							}
						}());
						
			属性的表示方法
				obj.prop  或者  obj["prop"]
					
				for in   这个还能实现变量属性循环
					for(var prop in obj)
				
				hasOwnProperty  用于排除父类属性用
				
				in  对象能否访问到一个属性
				
				A instanceof B	A对象是否是B构造函数构造出来的。看A对象的原型链上有没有B的原型 
					
					
		arguments、数组、三目运算
				var arr= new Aaary(10);  创建长度为10的空数组
				var arr1 = [10];
				
			数组常用方法
				改变原数组，push pop shift  reverse
				不改变原数组，concat,join
				
				
				Array.prototype.push= function(target){
					this[this.length]=target；
					this.length++;
				}
			类数组
				属性要为索引(数字)属性，必须要有length属性，最好加上push
				Array.prototype.push
				
				
		通过var给window上添加的属性是不可配置属性，delete不掉
				
				
		try catch es5标准 dom操作
			es5严格模式  use strict
				可以写在全局严格模式
				局部函数内严格模式(推荐)
				
		dom操作	
		<document>
			<html>
		操作的document
			对html和xml的标准编程接口
				xml中标签可以自定义，已经逐渐被json替代了
				
				主要也就是增删改查  appendChild  removeChild  document.createTextNode()
			
			选择器
				id name 类 选择
				id 标签 name 类名   css 选择器
			节点类型
				子父节点，同级节点
				
				元素节点
				属性节点
				文本节点
				注释节点
				document
				
			节点的四个属性：nodeName，
							nodeValue 
							nodeType 
							attributes	element节点的属性集合
							
			节点的一个方法  Node.hasChildNodes();
			获取节点类型 nodeType
				
				
			HTMLDocument 继承了	  Document.prototype
				
				
			document --> HTMLDocument
			
				
			
			element节点的一些属性
				innerHTML 	改变内部的html内容
				innerText	改变文本内容，注意文本结构，会覆盖结构
				
				
				
				方法  setAttribute() 和getAttribute()
				
		data-log应用
		
	var date=new Date()  和一些相关操作date的api
	
	var timer = setInterval(funcion(){},time); 定时器功能，定时循环
	clearInerval(timer)  可以停止上面的定时器
	
	var timerout = setTimeOut()  隔n时间后执行一次
	clearTimeOut(timerout)
	
	
	窗口属性，dom尺寸 脚本化css
		dom不能直接操作css，能间接改变   div.style。  这里是一个可读写的样式表
		
		dom.style.prop	
			复合属性必须拆解，组合单词小驼峰写法，写入值必须是字符串格式
			
			通过js改变状态位，比如class
			轮播图，一个定制div，然后一个几张图组成的胶卷，然后在div中的窗口滑动
			每个li中一个img 然后float起来，然后调整距离即可
	
	
	事件
		交互体验的核心功能
		div.onclick = function(){}
		
		绑定事件的三种方法
			1.ele.onxxx = function (event){};
				兼容性很好，但一个元素的同一个事件上只能绑定一个处理程序
				基本等同于写在html行间上(相当于 <div onclick="">)
				程序this指向dom元素本身
			2.obj.addEventListener(type,fn.false);
				IE9以下不兼容，可以作为一个事件绑定多个处理程序
				程序this指向dom元素本身
			3.obj.attacEvent('on'+type,fn)
				IE独有，一个事件同样可以绑定多个处理程序
				程序this指向window
				
		解除事件处理程序
			1.ele.onclick = false；
			2.ele.removeEventListener(type,fn,false)
			3.ele.detachEvent('on'+type,fn)
			若绑定匿名函数，则无法解除
		
		事件处理模型(可以取消冒泡和阻止默认事件)
			事件冒泡
				结构上嵌套关系的元素，存在事件冒泡功能，即同一事件，自子元素冒泡向父元素(自底向上)
			事件捕获
				结构上嵌套关系的元素，存在事件捕获功能，即同一事件，自父元素捕获至子元素(事件源元素) (自顶向下)
					
			IE没有捕获事件
			
		触发顺序，先捕获，后冒泡
		focus、blur、change、submit、select等事件不冒泡
		
		默认事件：表单提交，a标签跳转，右键菜单等
		javascript:void() 或者 void(0) 相当于return 0; void(false) 相当于return false；
		
		或者直接事件置为null,就取消了事件
		
		事件对象 事件委托(大致就是交给上级处理的意思)
			event ||window.event 用于IE  获取事件对象，这是种兼容的写法，用||
			事件源对象
				event.target 火狐只有这个
				event.srcElement ie只有这个
				这两个chrome都有
				
		事件分类
			鼠标事件
			mousedown，mouseup，mousemove
			
			键盘事件
			keydown keyup keypress(这个只响应字符类键盘按键)
			
			keydown>keypress>keyup
			
			窗体类操作类(window上的事件)
			scroll
			load  window.onload是页面加载完了等待交互使用了才使用，是最慢的加载
			
			
			
				用button来区分鼠标的按键，0/1/2
				dom3标准规定，click只能监听左键，只能通过mousedown和mouseup来判断鼠标键
				
				
		div.onmousemove = function(e){
			var event = e ||window.event;
			div.style.left = e.pageX+“px”;
			div.style.top = e.pageY+“px”；
		}
		 
		div.onmouseup = function(){
			div.onmousemove = null;
		}		 
		
		
		页面读取到js就会阻断页面，执行完js再往下读取，一般js写在下方
		
		html和css是可以并行解析的  domtree    csstree   两个一起形成渲染树，开始渲染页面
		
		先解析 然后异步下载资源
		js一般需要写在下面
		
		主程序不要放在 window.onload   这太慢了
		
		文档全部解析完，渲染树构建完，页面全部资源就绪了，都加载完了，最后才load，效率最低
		
		
	json，异步加载 和时间线
		本地用对象，传输用json
		String-json  JSon.parse() 反之是JSon.stringify()
		
		*****Json中的属性名必须加“，传递的其实是字符串，后台传回来的也是字符串，只不过是json格式*****
		
		解析 是深度优先原则 形成一个dom树
		html中，形成dom树，dom树的完成代表，dom所有节点解析完，并不是加载完毕。先解析完后才加载完
		形成cssTree
		dom树+cssTree=randerTree(渲染树)
		
		js是单线程的，也可以异步的引入
		
		js异步加载	
			1.defer异步加载，但要等到dom文档全部解析完才会被执行。只有IE能用
			2.async异步加载，加载完就执行。只能加载外部脚本，不能把js写在scirpt标签里
			3.创建script，插入到dom中，加载完毕后callback
		
		
		js时间线
			1.创建Document,解析web页面。document.readyState='loading'
			2.加载 css，js，遇到img，先正常解析dom，然后浏览器异步加载src
			3.文档解析完成，document.readyState='interactive'
			4.页面全部解析加载完执行完后，document.readyState='complete'，window对象触发load事件
			
			
		在解析完之后就可以操作了
			document.addEventListener('DOMContentLoaded',function(){
				console.log("");
			},false)
			
			这个比window.onload高效
			
	正则表达
		转义符号 \
		
		两种方法    
		直接量  
			var reg=/abc/;
		new RegExp()
			var reg=new RegExp("abc");
			
			
			str.match();  /reg.test();
			
			
			[0-9A-Z] 是区间的意思
			[^]表示非
			(abc|bcd) 二取一
			\w 代表 [0-9A-z_]
			\W 代表 [^\w]
			\d 代表[0-9]  \D代表非[^\d]
			\s代表 [\t\n\r\v\f ]  注意有一个空格
			\b 代表单词边界
			
			n+  	>=1
			n*  	>=0
			n？ 	0或者1个
			n{x} 	x个
			n{x,y}  x到y个 优先最大匹配  贪婪匹配原则
			^n   	以n开头的匹配
			n$		以n结尾的匹配
				reg = /^abc$/    以abc开头并且以改abc结尾
				reg = /(\w)\1(\w)\2/   匹配aabb

	对象引用操作
		前台js中
		var psa={"name":"wangzhan",}
		var obj1=psa;
		psa={"name":"baidu"}
		JSON.stringify(obj1);   -- 出来的是wangzhan，因为操作的不是同一个对象

		var psa={"name":"wangzhan",}
		var obj1=psa;
		psa.name="baidu";
		JSON.stringify(obj1);	-- 出来的是baidu，因为操作的是同一个对象