
https://www.liaoxuefeng.com/wiki/1022910821149312/1023020925712064     类型和变量

廖雪峰 js教程
问题：文件上传，ajax的跨域方案可以看看
	


js
	每个语句尽量以;结束
	注释 1.//  2./*...*/
	
	
	JavaScript不区分整数和浮点数，统一用Number表示，以下都是合法的Number类型：
		NaN; // NaN表示Not a Number，当无法计算结果时用NaN表示   				比较特殊
		Infinity; // Infinity表示无限大
		
		false == 0; // true
		false === 0; // false
		
		第一种是==比较，它会自动转换数据类型再比较，很多时候，会得到非常诡异的结果；
		第二种是===比较，它不会自动转换数据类型，如果数据类型不一致，返回false，如果一致，再比较。
		由于JavaScript这个设计缺陷，不要使用==比较，始终坚持使用===比较。
		
		
	字符串是以单引号'或双引号"括起来的任意文本
	
	null表示一个空的值，而undefined表示值未定义
	
	数组：
		JavaScript的Array可以包含任意数据类型，并通过索引来访问每个元素
		var arr = [1, 2, 3.14, 'Hello', null, true];
		动态给数组的长度和索引赋值是会改变数组的
		一般不建议直接修改Array的大小
		常规操作：
				截取slice()
				push()向Array的末尾添加若干元素，pop()则把Array的最后一个元素删除掉：
				往Array的头部添加若干元素，使用unshift()方法，shift()方法则把Array的第一个元素删掉：
				splice万能操作方法，可删可减
				join()方法是一个非常实用的方法，它把当前Array的每个元素都用指定的字符串连接起来，然后返回连接后的字符串
	
	对象
		{...}表示一个对象，键值对以xxx: xxx形式申明，用,隔开
		JavaScript的对象是一组由键-值组成的无序集合，例如：
		var person = {
			name: 'Bob',
			age: 20,
			tags: ['js', 'web', 'mobile'],
			city: 'Beijing',
			hasCar: true,
			zipcode: null
		};
		JavaScript对象的键都是字符串类型，值可以是任意数据类型。上述person对象一共定义了6个键值对，其中每个键又称为对象的属性，例如，person的name属性为'Bob'，zipcode属性为null。

		要获取一个对象的属性，我们用对象变量.属性名的方式：但这要求属性名必须是一个有效的变量名。如果属性名包含特殊字符，就必须用''括起来：

		person.name; // 'Bob'
		person.zipcode; // null
		
		xiaohong的属性名middle-school不是一个有效的变量，就需要用''括起来。访问这个属性也无法使用.操作符，必须用['xxx']来访问：但是尽量简洁点，就可以直接使用.了
		xiaohong['middle-school']; // 'No.1 Middle School'
		
		由于JavaScript的对象是动态类型，你可以自由地给一个对象添加或删除属性： 删除是直接delete xiaoming.age; 增加直接.属性即可
		
		
		
	赋值
		var a = 123; // a的值是整数123  动态语言
			a = 'ABC'; // a变为字符串

		int a = 123; // a是整数类型变量，类型用int申明		静态语言

		使用var申明的变量则不是全局变量，它的范围被限制在该变量被申明的函数体内（函数的概念将稍后讲解），同名变量在不同的函数体内互不冲突。


	字符串
		内容是不可变的
		JavaScript的字符串就是用''或""括起来的字符表示。
		如果'本身也是一个字符，那就可以用""括起来，比如"I'm OK"包含的字符是I，'，m，空格，O，K这6个字符。
		如果字符串内部既包含'又包含"怎么办？可以用转义字符\来标识，
		
	es6中支持多行方式 ：
		一般的用\n代替 
		console.log(`多行
					字符串
					测试`);
					
		模板字符串，一般用+连接
		var name = '小明';
		var age = 20;
		var message = `你好, ${name}, 你今年${age}岁了!`;
		alert(message);
		.length 长度，其他的也有一些indexOf()等操作方法
	if else	
		JavaScript把null、undefined、0、NaN和空字符串''视为false，其他值一概视为true
		
	for 循环
		for ... in循环，它可以把一个对象的所有属性依次循环出来： 
		var o = {
					name: 'Jack',
					age: 20,
					city: 'Beijing'
				};
				for (var key in o) {
					console.log(key); // 'name', 'age', 'city'
				}
				
		由于Array也是对象，而它的每个元素的索引被视为对象的属性，因此，for ... in循环可以直接循环出Array的索引
		
		
		for ... of  代替，直接遍历出数组的值，是用来遍历数组集合用的
			for(var x of a){
							console.log(x);
						}
									
		
		
	map 和 set
		一般也不常用
		但是JavaScript的对象有个小问题，就是键必须是字符串。但实际上Number或者其他数据类型作为键也是非常合理的。
		为了解决这个问题，最新的ES6规范引入了新的数据类型Map
		
		
	函数
			函数也是对象，所以可以var定义函数实现匿名函数
			
			function abs(x) {...} 和 var abs = function (x) {...}; 是等价的

			传参多一个也没问题，取所需顺序参数即可；
			少一个 abs(); // 返回NaN
			此时abs(x)函数的参数x将收到undefined，计算结果为NaN。
			
			
			var aa = typeof '11'== 'string';   判断参数类型

			arguments是函数内置的对象，可以操作入参
			
			
			这里是有坑的，因为行末是自动补上;的
			function foo() {
				return
					{ name: 'foo' };
			}
			
			
			在JavaScript中，用var申明的变量实际上是有作用域的。
			如果一个变量在函数体内部申明，则该变量的作用域为整个函数体，在函数体外不可引用该变量
			如果两个不同的函数各自申明了同一个变量，那么该变量只在各自的函数体内起作用。换句话说，不同函数内部的同名变量互相独立，互不影响：

			JavaScript的函数定义有个特点，它会先扫描整个函数体的语句，把所有申明的变量“提升”到函数顶部，但是不会赋值，
			var y; // 提升变量y的申明，此时y为undefined
			那么请严格遵守“在函数内部首先申明所有变量”这一规则。最常见的做法是用一个var申明函数内部用到的所有变量：
			
			全局作用域
				不在任何函数内定义的变量就具有全局作用域。实际上，JavaScript默认有一个全局对象window，全局作用域的变量实际上被绑定到window的一个属性
				JavaScript实际上只有一个全局作用域。绑定在windows上。任何变量（函数也视为变量），如果没有在当前函数作用域中找到，就会继续往上查找，最后如果在全局作用域中也没有找到，则报ReferenceError错误
				
				
			避免全局变量的重复，把自己的代码全部放入唯一的名字空间MYAPP中，会大大减少全局变量冲突的可能。
				// 使用唯一的全局变量MYAPP:
				var MYAPP = {};

				// 其他变量:
				MYAPP.name = 'myapp';
				MYAPP.version = 1.0;

				// 其他函数:
				MYAPP.foo = function () {
					return 'foo';
				};
				
			解构赋值，快速赋值的方法 ，了解即可
			
		方法：
			在一个对象中绑定函数，称为这个对象的方法。 this只想当前调用的对象，如果在外层，就是window
			var xiaoming = {
							name: '小明',
							birth: 1990,
							age: function () {
								var y = new Date().getFullYear();
								return y - this.birth;
							}
						};
						
			xiaoming.age  			这个对象的一个属性
			xiaoming.age()			这是调用对象的方法	
			
			
			
			这种情况也会报错，this指针只在age方法的函数内指向xiaoming，在函数内部定义的函数，this又指向undefined了！（在非strict模式下，它重新指向全局对象window！）
				var xiaoming = {
					name: '小明',
					birth: 1990,
					age: function () {
						function getAgeFromBirth() {
							var y = new Date().getFullYear();
							return y - this.birth;
						}
						return getAgeFromBirth();
					}
				};

				xiaoming.age(); // U
			重新定义一次变量即可
				var xiaoming = {
								name: '小明',
								birth: 1990,
								age: function () {
									var that = this; // 在方法内部一开始就捕获this
									function getAgeFromBirth() {
										var y = new Date().getFullYear();
										return y - that.birth; // 用that而不是this
									}
									return getAgeFromBirth();
								}
							};
							xiaoming.age(); // 25
			
			也可以使用apply来指定this调用的对象，一般不用
			
		高阶函数：sort，filter，array等，暂时用不到，后续使用可以再查
		
		闭包：
			在函数lazy_sum中又定义了函数sum，并且，内部函数sum可以引用外部函数lazy_sum的参数和局部变量，
			当lazy_sum返回函数sum时，相关参数和变量都保存在返回的函数中，即为闭包
				function lazy_sum(arr) {
						var sum = function () {
							return arr.reduce(function (x, y) {
								return x + y;
							});
						}
						return sum;
					}
					var cc=lazy_sum([1,2]);
					console.log(cc);			结果：function sum() 附带了[1,2]的函数
					console.log(cc())			结果：3

		箭头函数：不常用
			x => x * x
			上面的箭头函数相当于：

			function (x) {
				return x * x;
			}
			
	标准对象
		Date  	对应的月份是0~11
		
		RegExp 	对应匹配，用处遇到再看
				var r= /^(\d{4})-(\d{1,2})-(\d{1,2})$/	r.test();
				'a b   c'.split(/\s+/); // ['a', 'b', 'c']
				
				(),组的概念，exec()方法在匹配成功后，会返回一个Array，第一个元素是正则表达式匹配到的整个字符串，后面的字符串表示匹配成功的子串。

		JSON	JSON.stringify(xiaoming)  
				JSON.parse()把它变成一个JavaScript对象：
	
	
	面向对象
		构造函数，暂时没用
		除了直接用{ ... }创建一个对象外，JavaScript还可以用一种构造函数的方法来创建对象。它的用法是：先定义一个构造函数，然后在new来调用这个函数，创建一个对象
			function Student(name) {
								this.name = name;
								this.hello = function () {
									alert('Hello, ' + this.name + '!');
								}
							}
			这确实是一个普通函数，但是在JavaScript中，可以用关键字new来调用这个函数，并返回一个对象：
			如果不写new，这就是一个普通函数，它返回undefined。但是，如果写了new，它就变成了一个构造函数，它绑定的this指向新创建的对象，并默认返回this，也就是说，不需要在最后写return this;

			var xiaoming = new Student('小明');
			xiaoming.name; // '小明'
			xiaoming.hello(); // Hello, 小明!
	
		对象：class对象，继承相关
			class Student {
				constructor(name) {
					this.name = name;
				}

				hello() {
					alert('Hello, ' + this.name + '!');
				}
			}
			比较一下就可以发现，class的定义包含了构造函数constructor和定义在原型对象上的函数hello()（注意没有function关键字），这样就避免了Student.prototype.hello = function () {...}这样分散的代码。

			最后，创建一个Student对象代码和前面章节完全一样：

			var xiaoming = new Student('小明');
			xiaoming.hello();
			
	浏览器：
			常规操作： 
				.innerHTML获取标签的内容,这里不建议使用，因为可能会注入html的标签相关，使用innerText可以避免这一点(自动对字符串进行HTML编码，保证无法设置任何HTML标签)
				
				js中的confirm() 返回 true。如果点击取消按钮，则 confirm() 返回 false。中间可以传递相应的显示参数
	
				js中赋值全部带上引号
					js.style.color = '#ff0000';
					js命名为驼峰命名法，我习惯性写成了CSS里的font-weight:   p.style.fontSize = '20px,	js.style.fontWeight='bold';
	
			navigator可以拿到浏览器的相关信息
			
			screen对象表示屏幕的信息，常用的属性有：
			
			location对象表示当前页面的URL信息。例如，一个完整的URL：		http://www.example.com:8080/path/index.html?a=1&b=2#TOP
			要加载一个新页面，可以调用location.assign()。如果要重新加载当前页面，调用location.reload()方法非常方便。
			
			
			/**********
			document对象表示当前页面。由于HTML在浏览器中以DOM形式表示为树形结构，document对象就是整个DOM树的根节点。

			document的title属性是从HTML文档中的<title>xxx</title>读取的，但是可以动态改变： document.title = '你好吗';
			
			document.cookie;安全：服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取。
			
			history对象保存了浏览器的历史记录，JavaScript可以调用history对象的back()或forward ()，使用ajax后，这个已经基本废用了
			
		更新DOM信息
		
			.innerHTML 		不但可以修改一个DOM节点的文本内容，还可以直接通过HTML片段修改DOM节点内部的子树			可能变更了结构，又被注入攻击的危险
			.innerText		这样可以自动对字符串进行HTML编码，保证无法设置任何HTML标签更安全，						只能是字符串的更新,HTML被自动编码，无法设置html节点:。input的值是value获取的	
			.style			DOM节点的style属性对应所有的CSS，可以直接获取或设置。在JavaScript中字体大小改写为驼峰式命名fontSize。
			.appendChild	添加一个子节点
							var d = document.createElement('style');
								d.setAttribute('type', 'text/css');			/d.type='text/css';
								d.innerHTML = 'p { color: red }';
								document.getElementsByTagName('head')[0].appendChild(d);
							若要把子节点插入到指定的位置，可以使用parentElement.insertBefore(newElement, referenceElement);，子节点会插入到referenceElement之前。
							list.children[i]; // 拿到第i个子节点
		
			.removeChild	删除一个节点，首先要获得该节点本身以及它的父节点，然后，调用父节点的removeChild把自己删掉,删除过程中，parent是在变化的
							var parent = document.getElementById('parent');
							parent.removeChild(parent.children[0]);
			
		操作表单：
			<input>节点的引用，就可以直接调用value获得对应的用户输入值
							<input type="text" id="email">
							var input = document.getElementById('email');
							input.value; // '用户输入的值'
			
			text、password、hidden以及select。但是，对于单选框和复选框，value属性返回的永远是HTML预设的值，而我们需要获得的实际是用户是否“勾上了”选项
			
			<input type="date" value="2015-07-01">	可以直接生成一个时间控件
			
			onsubmit="return checkForm()"，可以用来实现提交前的一些校验和准备操作，返回true/false,
			
			没有name属性的<input>的数据不会被提交，input值使用value获取的
		
		操作文件：
			在HTML表单中，可以上传文件的唯一控件就是<input type="file">。
			注意：当一个表单包含<input type="file">时，表单的enctype必须指定为multipart/form-data，method必须指定为post，浏览器才能正确编码并以multipart/form-data格式发送表单的数据。
			出于安全考虑，浏览器只允许用户点击<input type="file">来选择本地文件，用JavaScript对<input type="file">的value赋值是没有任何效果的。当用户选择了上传某个文件后，JavaScript也无法获得该文件的真实路径：
			
			*************************文件上传还要看看
			HTML5的File API提供了File和FileReader两个主要对象，可以获得文件信息并读取文件。
			
			JavaScript的一个重要的特性就是单线程执行模式
			
			
			
		ajax，实现异步的局部刷新
			一般来说，如果开发API的是自己人的话，让他直接设置CORS就可以了。（我现在项目就是前后端分离，后台就是这样设置。） 如果要请求的API不在自己控制的话，如果对方提供了JSONP（像豆瓣那样的），可以使用JSONP。 
			最后如果是对方没有提供JSONP，前端又需要用到那方面的API的话，那就需要搭建发现代理服务器咯。 其实我比较倾向于搭建代理服务器~
			
			一次HTTP请求对应一个页面。
			如果要让用户留在当前页面中，同时发出新的HTTP请求，就必须用JavaScript发送这个新请求，接收到数据后，再用JavaScript更新页面，这样一来，用户就感觉自己仍然停留在当前页面，但是数据却可以不断地更新。
			
			
			跨域的方案：跨域能否成功，取决于对方服务器是否愿意给你设置一个正确的Access-Control-Allow-Origin，决定权始终在对方手中。
				架代理服务器，另一种在同源域名下架设一个代理服务器来转发，JavaScript负责把请求发送到代理服务器，服务端需要开发。
				jsonp		我们如果在页面中先准备好foo()函数，然后给页面动态加一个<script>节点，带上回调函数，相当于动态读取外域的JavaScript资源，最后就等着接收回调了。
				CORS
				
				
				
				
		jQuery		
			jQuery统一了不同浏览器之间的DOM操作的差异，让我们可以简单地对DOM进行操作
			直接使用浏览器提供的API对DOM结构进行修改，不但代码复杂，而且要针对浏览器写不同的代码。有了jQuery，底层的DOM操作由jQuery完成就可以了。简化操作，提高兼容性
			选择器是jQuery的核心。一个选择器写出来类似$('#dom-id')。快速定位到一个或多个DOM节点。
			jQuery对象类似数组，它的每个元素都是一个引用了DOM节点的对象。jQuery的选择器不会返回undefined或者null，这样的好处是你不必在下一行判断if (div === undefined)。
			通常情况下你不需要获取DOM对象，直接使用jQuery对象更加方便。如果你拿到了一个DOM对象，那可以简单地调用$(aDomObject)把它变成jQuery对象，这样就可以方便地使用jQuery的API了。
			
			三种选择器，
					tag,			var ps = $('p'); // 返回所有<p>节点			ps.length; // 数一数页面有多少个<p>节点
					class,
					id。
					属性			一个DOM节点除了id和class外还可以有很多属性，很多时候按属性查找会非常方便，比如在一个表单中按属性来查找：		var email = $('[name=email]'); 
					
					jQuery选择器(基本)：
						$('#id')
						$('.className')
						$('div')				******直接选择div标签，直接选择标签******
						$('div#id')
						$('.class1.class2')  // 中间不加空格表示：类名同时等于class1和class2的
						$('.class1 .class2')  // 中间加空格表示：类class1下面的class2							******层级之间用空格隔开******
						$('.class1,.class2')   // 中间加逗号表示：类class1和类class2两个都
			
					层级选择器					$('ancestor descendant')								用空格隔开
					子选择器					$('parent>child')										限制了必须是子父级关系
					过滤器（Filter）			$('ul.lang li:first-child'); //******好像是用:******	过滤器一般不单独使用，它通常附加在选择器上，帮助我们更精确地定位元素。观察过滤器的效果：
					
					查找和过滤
							以这个对象为基准，进行查找和过滤
							find()，
							next()和prev() 			同级前后查找
							parent()				向上级查找
							filter()				滤掉不符合选择器条件的节点
							map()					把一个jQuery对象包含的若干DOM节点转化为其他对象
							
			jQuery_操作dom
					修改文本内容			text(),html()		方法分别获取节点的文本和原始HTML文本		$('#test-ul li').text('JS'); 
					
					修改样式css				jQuery对象的所有方法都返回一个jQuery对象（可能是新的也可能是自身），这样我们可以进行链式调用
											$('#test-css li.dy>span').css('background-color', '#ffd351').css('color', 'red');            css('name', 'value')   
											css()方法将作用于DOM节点的style属性，具有最高优先级。如果要修改class属性，
											div.hasClass('highlight'); // false， class是否包含highlight
											div.addClass('highlight'); // 添加highlight这个class
											div.removeClass('highlight'); // 删除highlight这个class
											
					显示和隐藏DOM				.hide(); 	.show()			隐藏DOM节点并未改变DOM树的结构，它只影响DOM节点的显示。这和删除DOM节点是不同的
					获取dom信息					.attr()	获取或者更新							
												attr()和removeAttr()方法用于操作DOM节点的属性：
												.val()						一个val()就统一了各种输入框的取值和赋值的问题
												******.val()和.attr()******的区别
												.val()主要用来获取表单中元素的值，例如input， select 或者textarea。 value值
												.attr()直接操作dom，还可以用来修改id  class等其他属性的
						添加DOM
							append()
							append()把DOM添加到最后，prepend()则把DOM添加到最前。
							after()或者before() 	同级节点
							remove()				删除节点
							
			jQuery_事件
				JavaScript在浏览器中以单线程模式运行，页面加载后，一旦页面上所有的JavaScript代码被执行完后，就只能依赖触发事件来执行JavaScript代码。
				
				获取和设置disabled、selected、checked这些属性时，应该使用prop()方法，不要使用attr()方法！！能够用prop()操作的尽量用prop()操作，不要用attr()操作。
			
				on方法用来绑定一个事件，我们需要传入事件名称和对应的处理函数。
					var a = $('#test-link');
						a.on('click', function () {
							alert('Hello!');
						})
						
				简化后：a.click(function () {
								alert('Hello!');
							});
							
													
				鼠标事件	常用click: 鼠标单击时触发；  hover：鼠标进入和退出时触发两个函数 等
				
				键盘事件	keydown：键盘按下时触发； keyup：键盘松开时触发； keypress：按一次键后触发。通常<input>和<textarea>
				
				其他事件	focus：当DOM获得焦点时触发； blur：当DOM失去焦点时触发； 
							change：当<input>、<select>或<textarea>的内容改变时触发； 
							submit：当<form>提交时触发； 
							******ready：当页面被载入并且DOM树完成初始化后触发。******
							ready仅作用于document对象。由于ready事件在DOM完成初始化后触发，且只触发一次，适合初始化代码
							
							案例：先js 后表单内容：		为JavaScript在此执行的时候，<form>尚未载入浏览器，所以$('#testForm)返回[]，并没有绑定事件到任何DOM上。
							简化：	$(document).ready(function () {
										// on('submit', function)也可以简化:
										$('#testForm).submit(function () {
											alert('submit!');
										});
									});
							
							更简化：如果你遇到$(function () {...})的形式，牢记这是document对象的ready事件处理函数。
								$(function () {
										// init...
									});
																
							
							事件参数
								有些事件，如mousemove和keypress，我们需要获取鼠标位置和按键的值，否则监听这些事件就没什么意义了。所有事件都会传入Event对象作为参数，可以从Event对象上获取到更多的信息：

								$(function () {
									$('#testMouseMoveDiv').mousemove(function (e) {
										$('#testMouseMoveSpan').text('pageX = ' + e.pageX + ', pageY = ' + e.pageY);
									});
								});
							
							
								var input = $('#test-input');
								input.change(function () {
									console.log('changed...');
								});
								当用户在文本框中输入时，就会触发change事件。但是，如果用JavaScript代码去改动文本框的值，将***不会***触发change事件：

								var input = $('#test-input');
								input.val('change it!'); // 无法触发change事件
								
								
							浏览器安全限制
								window.open()等函数：
								
			jQuery_动画
					JavaScript实现动画，原理非常简单：我们只需要以固定的时间间隔（例如，0.1秒），每次把DOM元素的CSS样式修改一点（例如，高宽各增加10%），看起来就像动画了。
					基本的操作后，动画效果还不能满足你的要求，animate()，可以实现任意动画效果，我们需要传入的参数就是DOM元素最终的CSS状态和时间，jQuery在时间段内不断调整CSS直到达到我们设定的值：							
					
					
			jQuery_AJAX		
				jQuery在全局对象jQuery（也就是$）绑定了ajax()函数。
				如果需要使用JSONP，可以在ajax()中设置jsonp: 'callback'，让jQuery实现JSONP跨域加载数据。
				
	异常处理
			try ... catch ... finally
			编写JavaScript代码时，我们要时刻牢记，JavaScript引擎是一个事件驱动的执行引擎，代码总是以单线程执行，而回调函数的执行需要等到下一个满足条件的事件出现后，才会被执行。
			涉及到异步代码，无法在调用时捕获，原因就是在捕获的当时，回调函数并未执行。典型的就是延迟函数


					
Head First HTML与CSS 第2版
		开始	--- 结束
		浏览器会忽略html文档中的制表符，回车和大部分空格，只会根据标记来确定位置和显示。
		页面结构   **************重点**************
			<html>
				<head>
				<meta charset="UTF-8">					-- 指定浏览器识别的编码
					<style>								-- 默认的type就是"text/css"
					<style>
				</head>
				
				<body>
				</body>
			</html>
			
		元素=开始标记 + 内容 + 结束标记					普通元素
		void元素		没有实际内容的元素			<img>，<br>		
		
		<head>	网页信息都放在其中
		<body>	就是在浏览器中看到的东西
		<style>	元素总是放在<head>中
		空格等在浏览器中是忽略的，只识别标志符号，但是可以让html可读性提高
		标签属性value都要用双引号
		html中的路径分割符号是"/",不区分系统，web上是统一的
		
		相对路径是相对于链接的源web页面只想网站中其他文件的一个链接
		
		<q> 			简短引用		内联元素(页面文本流中总在行内出现)		随波逐流
		<blockquote>	段落引用		块元素(显示前后各有一个换行) 			特立独行
		
		<a>中的title 	链接提示
			   #id		链接到页面的特定位置
			   
		<img>中的alt 	图像异常时候的备份显示
			
						
		列表	元素和组的概念			
				<ul>				无序
					<li></li>
				</ul>
				
				<ol>				有序
					<li></li>		列表项
				</ol>
		
		dl dt dd 暂不研究
		
		关键字符是需要转义的   比如<>  和 空格
		
		
		www.xiaoyuer.com  	是一个网站名，只是域上的一个网站
			xiaoyuer.com   	是域名，可用于多个网站  a.xiaoyuer.com  b.xiaoyuer.com
			
			
		根文件夹的内容可以直接从网上访问到，最终浏览器都是转换为绝对路径访问资源的
		
		相对路径一般链接的是同一网站的页面，url一般连接外部的网站页面
		
		缩略图的原理：使用小像素的图，然后图片a链接到原图的地址
		
		html的结构和表现分工合作
		在html的顶部有doctype的定义，是html相关版本的信息
		html5后只要<!DOCTYPE html>即可  html5之后就是活的标准，不会再有html678了，后续兼容
		
		html验证网址：http://validator.w3.org/
		
		html指定编码，浏览器直接读取即可，浏览器只能读取数据
		
		utf8是unicode系列中的一个编码，web中使用的就是utf8
		为服务器提供的文件的编码要与<meta>标记中指定的编码一致
		h5直接使用<meta charset="UTF-8">即可
		
		
		h5常识性问题
			一定要以<doctype>开头，之后是基本的三结构html，head，body
			其他元素都必须放在head和body中，head中meta中指定编码  
			只能在head总放置<title>(必要)、<meta> 和<style>
			不要在<a>中嵌套<a>，不要在<img>等void元素中嵌套其他内联元素
			alt属性是<img>必要的元素
			<del></del>  删除线
		
		css
			块元素，内联元素，盒模型
			选择器指定规则将应用到哪些元素上
			只能对body中的元素增加样式
			
			可以选择一个元素比如p，这样样式应用所有的p元素   p{} 或者body等元素，设置样式，配合body是 *****元素选择器*****
			
			多个同样式的元素可以合并,元素用“,”分开，样式用空格分开，h1,h2{
																	color: red;
																	border-bottom:	5px solid black;
																	}
			引入样式<link type="text/css" rel="stylesheet" href="">，type="text/css"现在不用指定了
				
			样式是可以继承的，从父元素那继承，这样可以统一调样式，但是继承的样式是会*****被覆盖的*****
			
			css中的注释 /*ceshi*/
			
			增加class属性，将元素加入到相应的类中，类在.css中定义
			
			p.grenta 只能是类中的p元素适用      .grenta是类中的所有元素通用   这个是类选择器
			
			<p class="class1 class2">空格分隔，没有顺序  这是多个选择器选择一个元素  ******************会优先使用css中规则最靠后的******************
			没有指定和继承，就使用浏览器的默认值
			
			常用的属性：
				font-size				字体大小
				font-weight				字体粗细
				text-decoration			划线
				@font-face				使用引入指定字体，定制字体
				font-style				可以设置斜体
				
				
			font-size: 150%/1.2em		是指相对于父元素的大小，后者是比例
			
			通过在<body>元素中定义字体大小，实际上是为页面定义一个默认大小。
			使用px定义页面，这样后期整体换字体的时候会麻烦些，默认的字体大小一般是16px
			
			指定颜色，使用百分比；使用数值；使用十六进制(最广泛)，红绿蓝
			
			可以去除继承的装饰属性
			em{
			text-decoration: none;
			}
			
			*****css中的类的属性顺序很重要，后面会覆盖前面的*****
			
			盒子模型
				width  仅仅只指定元素内容区的宽度，不是元素的宽度
				
				整个元素，有一个内容区，由可选的内边距包围，外面是一个可选的边框，由可选的外边距包围
				外边距用于在元素之间增加空间，若两个盒子紧挨着，外边距就相当于两个之间的空间
				
				内外边距的区别
					外边距提供元素之间的间距，内边距是在内容周围增加额外的空间。内边距是元素的一部分，外边距包围这元素，将其与其他元素隔开
					
				padding 内边距   	
				margin	外边距  
				border	边框
				
				border-style: solid;   边框的样式
				
				
				*****内外边距的调节关键在于边框*****
				如果需要在内容区本身周围有更大的可见空间，就要使用内边距；如果希望元素与页面边缘之间有更大的空间，这种情况使用外边距
					
				目前测试 内边距为负数是无效的，外边距是可以为负数的
			
			
				如果想对多个元素重用某些样式，用class类比较合适。但是如果只有一个元素需要指定样式，这样情况不适合用类,使用用id
				因为公用的样式，别人也可能修改
				
				id选择器
					#footer{}		选择id为footer的元素		
					p#footer{}		选择id为footer的<p>元素
				
				引入多个样式表的时候：顺序很重要，下方的样式优先
				修改样式，先引入一个基础样式表，然后在下面再提供自己的样式覆盖即可
				
				用于指定显示设备，好像用的也不多
					<link rel="stylesheet" type="text/css" href="print.css" media="print"/>
	
				元素的背景会在内容和内边距下显示，但是不会延伸到外边距下面
				
				将元素嵌入<div>，指示所有的这些元素属于同一个组，相当于一个容器，<div>在页面中没有外观或者默认样式，是一个块元素，块元素会带来换行
				
				这里使用div的样式也可以理解是基础样式，包含其中的元素也可以特定样式覆盖(div中有各种元素，都是有各自的内外边距的，div的只能算是父级样式)，大部分的属性都能继承
				*****对div设置样式，然后这些样式会被其中的元素继承*****
				
				text-align是能应用在块元素上，比如div,div设置后对其中的所有内联内容都会有效果
				
				
				基于元素的子孙选择器 ，只针对某个父元素下的子元素设置样式,子选择器比一般的元素选择器更有特定性
					div h2{
						color: blue;
					}
					
					
				基于id的子孙选择器，选择的是所有的h2  也可以指定某一个层级 #footer  div h2
					#footer h2{
						color: blue;
					}
					
				line-height的属性值 		不使用em 或者 %，直接使用数字1等(文字大小1倍)	设置文字行高，不收继承影响
				
				div是为块级内容创建逻辑划分，<span>元素则建立内联内容的逻辑分组，<span>一般用来改变一些样式，没有类似em等强调的作用
				
				使用伪类，常见的是用在超链接上,暂记吧，:focus等
				a:hover {
					color:	yellow;
				}
	*************
			ID选择器 > 类选择器 > 标签选择器(元素选择器)
			在样式表中增加一个新规则，它会覆盖在它之前的所有相同规则
			对于冲突的规则，按照他们在各自样式表中出现的顺序进行排序
			特定性打分相同的出现顺序靠后的优先
	*************
	

		
		页面的资源加载
			浏览器使用流加载页面资源，遇到块元素会换行
			块元素从上向下流，各元素之间有一个换行，内联元素在水平上会相互挨着，总体上是从左上方流向右下方。每个块元素会占浏览器窗口的整个宽度。
			
			
			并排放置内联元素，元素距离是两个外边距之和；块元素上下放置的时候，会折叠两个外边距，取大的
			
			文本内容也可以当做是一个内联元素
			
			内联元素会围绕浮动元素，整个块元素在浮动元素下面，浮动元素使用了就不再属于正常流的一部分，使用后就从正常的流中删除了
			
			浮动元素必须由特定的宽度，不能设置为auto
			
			
			流体布局(扩展浏览器窗口时，页面中内容扩展以使用页面)
			
			css的clear属性：当元素流入页面的时候，这个元素的左、右或两边不允许有浮动内容
			
			冻结布局
				内容宽度固定，不会随着浏览器窗口扩展和收缩。
			
			凝胶布局会锁定页面中内容区的宽度，但是会将它在浏览器中居中。
				内容宽度固定，但是外边距会随浏览器窗口扩展收缩。
			
			
			*****使用绝对定位***** absolute 使用绝对定位
			#sidebar{
				position: absolute;
				top: 100px;	
				right: 200px;
				widt: 280px;
			}
			
			一个元素绝对定位时，就会将它从流中完全删除，绝对定位元素，对流中元素没有影响
			绝对定位是可以分层的，z-index属性越大，就在上面
			
			表格相关暂时跳过
			
			相关布局
				浮动布局，凝胶布局，绝对布局，表格显示布局(div)
				
				
			若要精确定位一个元素，使用绝对定位，如果希望文本围绕一个图像，使用浮动比较合适。
			
			使用固定定位，position: fixed，滑动浏览器的元素不动，使用决定定位元素会动
			position: relative; 是相对于某个元素的位置，相对于其外围包含元素，保留元素在文档中的流位置
			绝对定位一般是相对于html指定的，会删除元素在文档中的流位置
			
			
			
			绝对定位：absolute：生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。完全厉害流
			
			不少朋友在使用absolute的时候发现它“似乎”也是针对浏览器窗口定位的，其实是因为没有设置父元素的static值。
			<div id="parent" style="position:static;">
				<div id="son" style="position:absolute; top:0; left:10px;"></div>
			</div>
	
			这样，id为son的div才会相对于
			
			
			position：
				静态
				绝对：默认相对于页面边界放置。但若是嵌套在另一个定位元素中，这元素就会相对于外包含元素定位。
				相对：还在流中。
				固定
				
			建立表格  table  tr th td
			表格中有个border-spacing的单元格间隔属性
			跨行合并单元格，rowspan="2";使用col span="2"，多出来的空要空出来对齐
			
			单选框
				同组的radio的name相同
				label  for 绑定元素     任何表单控件都可以使用，以一种有助于提高可访问性的方式，关联标签和表单元素。
				
css权威指南   什么垃圾书 讲的乱没有重点
		<p>也是块级元素
		浏览器会忽略掉样式表中的空白符
		h1[title="3"]   带有title属性的元素，并且值是3
		边框无法继承
		px 像素其实也是相对单位，因为它取决于显示设备的分辨率。
		
		
css设计指南   还可以写的，后面可以再看看
-- 第五章页面布局相关需要关注
--- 
		在h5之前，页面结构只使用一些没有语义的标签，比如<div>和<span>。。。后来加入了<section> <nav>等
		
		文本用闭合标签如<p>，引用内容用自闭合标签如<img>
		
		常见的块级元素：<h>,<p>,<div>
		...的行内元素：<a>,<img>,<em>,<strong>		并列，空间不足时才会折行显示
		定位元素的首要考虑就是 是块级还是行内元素
		
		块级元素盒子会扩展到与父元素同宽
		格式缩进对齐还是比较重要的
		
		
	html结构对应的文档对象模型简称为DOM。
	文档添加样式的三种方式:	
		行内样式		写在style属性中，只影响所在标签，会覆盖嵌入样式和链接样式
		嵌入样式		应用当天页面，会覆盖链接样式
		链接样式		
		
			
		在样式表中链接其他样式表的方法，就是@import，需放在其他样式之前
		
		当浏览器遇到<style>，就会解释html代码切换为解释css代码，遇到</style>就会再切换回解释html代码
		
		css 由选择符和声明组成
		
		选择符分为三种：
			上下文选择符，	可以隔代，只要有对应的祖先元素即可，
					标签1>标签2   这是子选择符
			id和类选择符，
			属性选择符			img[title="red flower"] {border:4px solid green;}
		
		***** 上下文选择符以空格分隔，分组选择符以逗号分隔*****
		
		选择同时存在这两个类名的元素：   .class1.class2{}  多类选择符
		
		共性样式用类，特性样式用id选择
		
		伪类的分类
			1.UI伪类
				会在html元素处于某个状态时(比如鼠标指针位于链接上)，为元素应用css样式
					链接伪类，focus伪类，target伪类
					
			2.结构化伪类
				会在标记中存在某种结构上的关系时(如某个元素是一组元素中第一个或最后一个)，为相应元素应用css样式
					:first-child，li:nth-child(3)等
				
			a:visited	
			一个冒号表示伪类，两个冒号表示css3新增的伪元素
			
			3.伪元素
				::first-letter,e:before等
				
				
				
		相对字体单元（百分比和em时），是相对上层元素而言的		
		CSS有三种机制：
			继承
				大部分的属性都能继承，设计元素盒子定位显示的，如边框，外边距，内边距等不能继承
				
			层叠
				
				浏览器层叠来源样式的顺序：	
						浏览器默认样式表，用户样式表，链接样式表，嵌入样式表，行内样式表,********总的顺序********
						层叠规则:1找到应用给每个元素和属性的所有声明 2按照顺序和权重排序 3按特指度排序
						
						总结就是，找到元素的每一条css规则，然后按照顺序处理覆盖，最后展示出来
										
						
			
			特指
				I-C-E，计算权重分，id 类 和元素  
				链接样式表中，若特质度一样，则位置靠下，或者后声明的规则胜出
				
				
				
			**********
			总结同规则名按出现顺序倒序，不同名，冲突的看特定度，(特定度相同看顺序)
			同名看顺序，不同名看特定度，特定度一样继续看出现顺序
			**********
			
			
			顺序决定权重
				如果两条规则都影响某元素的同一个属性，而且特指度也相同，则位置靠后的规则胜出
				
				
			css属性值主要有三类：文本值，数字值，颜色值。
			
	页面板式主要由三个属性控制：
		position，		控制页面元素间位置
		display，		元素堆叠
		float			多栏布局
		
		比如margin等属性的顺序是上右下左 顺时针记忆，缩写的时候可以直接。没有写的值使用对边的。
		
	元素盒子还有一个背景层，可以改变颜色，也可以添加图片。
	
		边框：宽度 样式 颜色
		边框默认： border-width:medium; border-style:none;border-color:black;
		这样写p{border:solid 1px}可以显出边框便于调试
		
		
	中和外边距和内边距：*{margin:0;padding:0;}这样可以按需添加内外边距
		
	垂直方向上的外边距会叠加。较宽的外边距决定连个元素最终多远，
	外边距叠加，直到一个元素的外边距碰到另一个元素的边框为止。
	0.75em就是保存在字体高度的四分之三。
	元素和盒子代表同一个意思，若不设置块级元素width属性，那么默认是auto，就是让元素扩展到和父元素同宽
	
	盒模型结论
		1.没有设置width宽度的元素始终会扩展到填满其父元素的宽度位置。
		添加水平边框，内边距和外边距，会导致内容宽度减少，较少量等于水平边框，内边距和外边距之和。
	
		2.盒子的width属性设定只是盒子内容区的宽度，非盒子占据的水平宽度。所以加大内外边距盒子会扩展的更宽
		
		
	浮动与清除  ****************** 后续使用到了再关注
		浮动的效果：1可实现类似文绕排图片的效果   2可让原上下堆叠的块级元素，变成左右并且，实现分布局中的分栏。
		浮动之后就会脱离文档流.
		若相邻元素都具有设定的宽度，都是浮动的，且水平空间足够，它们就会并列排在一起
		
		.clearfix:after { 
			 content:"."; 
			 display:block; 
			 height:0; 
			 visibility:hidden; 
			 clear:both; 
			}
			
		这个比较适用
		
		使父元素包含浮动的子元素，共三种方式：1为父元素引用over:hiden,2.浮动父元素，
					3.在父元素的内容末位尾添非浮动元素，可通过在标记中，也可以添加clearfix
					
					
					
	css中的position		关键是元素定位的上下文，默认是static定位，top、left等元素对其无效
		static			
		relative：	相对定位，相对的是它原来在文档流中的位置(或默认位置)，元素原占据空间没动，其他元素也没动	
		absolute	会脱离文档流，然后再相对于顶级元素body定位。元素之前占据的空间被回收了		
					绝对定位元素默认的定位上下文是body元素
		fixed		定位的上下文是视口
					
					
		外部div改为相对定位之后，后代中绝对定位的元素就会按照top和left属性设定，相对于外部div定位。
		决定定位元素的任何祖先元素都可以成为它的定位上下文，只要吧相应的祖先元素的position设定为relative即可
		
	显示属性 display   
					block  		块显示
					inline  	行显示
					none		不显示，并且原先占据的所有空间会被回收。 元素实际上就从页面中被移走，它下面所在的元素就会被自动跟上填充
								释放该元素在文档中所占的物理空间，对于其他元素来说，相当于该元素不存在，因此，该元素的位置被其他元素顶替
					相对的visibility
						visible
						hidden		隐藏 	元素虽然被隐藏了，但它仍然占据它原来所在的位置。
		
			display:none;		HTML元素（对象）的宽度、高度等各种属性值都将“丢失”;其它内容将填充到该元素留下的空白位置，从而改变页面的布局。

			visibility:hidden;	HTML元素（对象）仅仅是在视觉上看不见（完全透明），而它所占据的空间位置仍然存在，也即是说它仍具有高度、宽度等属性值。
					
					
	背景相关暂不细看，第五章之后异常
	
	根据body字体的大小。默认情况下1em等于16像素，是font-size的基准大小   

	修改body元素的字体大小，不会影响页面中以绝对单位控制的元素，但没有设定字体大小的元素则会与body字体大小成正比
		
	若给某个元素设定了相对字体大小，则钙元素的字体大小要相对于最近的“被设定多字体大小的”祖先元素来确定
	
	em指的是相对于元素父元素的font-size
	
	vertical-align 只影响行内元素
	
	Web页面中“body”的文字大小在用户浏览器下默认渲染是“16px”
	
	1. 浏览器的默认字体大小是16px，可以在浏览器中设置默认的字体大小（下面的Chrome浏览器的设置方法）
	2.  em是一个相对的单位，是当前元素相对于父元素字体的大小而言的， 如果父元素没有设置字体大小的话，就是想对于浏览器默认的字体大小而言的
　　4.  除了元素字体可以设置em，元素的width，height， padding，border，margin 都是可以设置em的 
	
	
	多栏布局三种基本的实现方案：固定宽度，流动，弹性
	
	控制布局宽度，让内容决定布局高度。
	
	margin: 0 auto;  这个一般是样式水平居中用的
	
	响应式设计：  使用相对大小单位，让布局随屏幕大小缩放，流动布局
		
	css 中 使用 !important 来打补丁
	
	
	块级元素拥有“换行”的特性，一般用于结构（骨架），内联元素能够同行显示，一般用于内容展示

前段  带着看看就行了，改变策略  先看视屏
		width和height都是调整的是内容区，100%都是相对父元素，height的百分比的父元素一定要指定，不然就没效果
		table,h1 等内置的样式是无法改的，只能覆盖
		table，th和td有独立的边框，tr是没有边框的
		行内元素适合显示具体内容，而块级元素适合做布局
		盒子模型中padding和margin垂直方向指的，对inline（行内元素）如：<a> ,<span>...等失效的

		height上，一般需要指定 html,body{
	height: 100%;
	}，不然没有父元素的高度。

	block 块级元素
		会占领页面的一行，其后多个block元素自动换行、 可以设置width，height，设置了width后同样也占领一行、同样也可以设置   margin与padding属性。

	inline 行级元素
		与其他元素在同一行上，不能更改元素的height，width的值，top和bottom无效，大小由内容撑开，不可以改变。

	inline-block:	不独占一行的块级元素

	伪类和伪元素的区别

	float布局中的常见问题：
		高度塌陷：float元素脱离文档流，子元素无法撑起父元素的高度(文档流中是可以撑起的，子元素多高父元素就有多高)
		解决办法:1.父元素设置 overflow: auto,自动适应是不能指定高度的 2..clear{clear:both}   父级div最后加个空div

	
	float元素：
		float在后面
			遇到行内元素，要看宽度之和是否大于父宽度，大就换行；遇到块元素，直接换行
		float在前面，直接覆盖，同行
		
	 text-align 文本对齐方式

	 visibility: hidden  指定元素是否可见

	 js中 var expObj = (function () {
})();
	相当于定义一个函数并立马执行
	 jquery 中可以使用addClass直接添加一个.class样式

	 !important  用来提高css的样式为最大权限

		Absolute：绝对定位，是相对于最近的且不是static定位的父元素来定位
		Fixed：绝对定位，是相对于浏览器窗口来定位的，是固定的，不会跟屏幕一起滚动。
		Relative：相对定位，是相对于其原本的位置来定位的
	
	   static定位(普通流定位) -------------- css 中元素的默认定位
	
	overflow:hidden   的功能
		溢出隐藏				内容若超出了给定的宽度和高度属性，自动隐藏
		清除浮动				float相关
		解决外边距塌陷			外边距问题
	
	
	div等标签相当于封装了样式模板
	
	placeholder在老版的浏览器不兼容，可以使用label+for来代替
	
	$(document).ready()和windows.onload 同样是页面初始化的
	window.onload=function(){};和（function(){}）()都可以实现初始化
	
	
	function aa(id){
		return document.getElementById(id);
	}
	可自行封装函数调用
	
		this的指向在函数创建的时候是决定不了的，在调用的时候才能决定，谁调用的就指向谁，一定要搞清楚这个。
	js只调用最后加载的函数f，其他同名的都会被覆盖。
	tabs[i].onmouseover = showTab;  这个赋值函数    onclick="showTab()" 这是调用函数

	var tabs = document.getElementsByName('tab');
	var contents = document.getElementsByName('divcontent');
	
	//动态绑定事件
	(function changeTab(tab) {
	    for(var i = 0, len = tabs.length; i < len; i++) {
	        tabs[i].onmouseover = showTab;
	    }
	})();
	
	//事件触发
	function showTab() {
	    for(var i = 0, len = tabs.length; i < len; i++) {
	        if(tabs[i] === this) {
	            tabs[i].className = 'selected';
	            contents[i].className = 'show';
	        } else {
	            tabs[i].className = '';
	            contents[i].className = 'tab-content';
	        }
	    }
	}

	onclick="aa(this)" 中一定要传递this对象到函数中，否则函数中直接使用this 就是window对象
	
	******######********
		行内绑定(静态绑定)中，其事件处理中的this指向了全局window对象
		动态绑定中，其事件处理中的this指向了当前正在操作的dom对象
	******######********	

	2、a href="javascript:void(0);" onclick="js_method()"
	     a href="javascript:;" onclick="js_method()"
		onclick方法负责执行js函数，而void是一个操作符，void(0)返回undefined，地址不发生跳转。 区别只是执行了一条空的js代码。


		
		
	thymeleaf
		th:text		直接文本复制，当做字符串
		th:utext	会解析文本中的html，显示相应样式

	setInterval() 方法可按照指定的周期（以毫秒计）来调用函数或计算表达式。
