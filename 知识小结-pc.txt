【现在还不是停止奋斗的时候】


1、	<context:property-placeholder location="classpath:jdbc.properties"/>数据源的配置，	相应的配置文件读取即可。
2、	 <context:component-scan base-package="com.test.blog"/>注解的扫描，无需手动配置bean
3、	solr已键值对形式存储内容

4、	linux语言

	chmod +x *.sh 这个命令是为sh文件增加可执行权限；
	rm -rf * 强制递归删除
	yum -y install 包名（支持*） ：自动选择y，全自动
	yum install 包名（支持*） ：手动选择y or n
	ll是会显示当前目录下的文档详细信息（包括权限、所属用户和组、大小、时间、名称等），		是ls -l的缩写；ls只显示当前目录下的文档名。
	tar zxvf zhcon-0.2.5.tar.gz
	z代表gzip的压缩包；x代表解压；v代表显示过程信息；f代表后面接的是文件
	linux 下  make 编译  make install 安装 make uninstall卸载
	cp 文件 文件路径   复制文件
	cp -r 文件夹 路径  复制文件夹内容到指定路径下

	vim linux下的文本编辑器  进入后，按/，然后输入字符串，回车，按N或者n是向前向后搜索字符串    
	如果在命令行下使用vim，先按下ESC退出编辑模式，然后输入：wq 保存并退	出或者q退出或者q!强制退出，从而回到命令行界面。
	ll *.rb 查找当前文件夹下的rb文件
	mkdir 目录名    创建一个目录
	chmod +x 文件  给出文件的可执行权限
	ps | grep 和 ps aux | grep  显示运行中/所用状态的进程
	
5、	redis 前端启动模式 usr/local/redis/redis-server 默认6379端口
	      后端启动模式 从redis的源码目录中复制redis.config到安装目录，在修改配置文件	daemonize yes后，启动./redis-server redis.config

	关闭指定端口的redis，redis01/redis-cli -p 8080 shutdown

6、	redis集群分布式节点一般一主一备，当任意master挂了没有备份或半数以上的master挂了则集群不可用
	redis的两种持久化方案：1、snapshotting 快照  2、Append-only file  保存命令行形式
	持久化机制 
	redis是一个支持持久化的内存数据库
	snapshotting快照方式，默认的存储方式，默认写入dump.rdb的二进制文件中，可以配置redis在n秒内如果超过m个key被修改过就自动做快照
	append-only file aof方式，使用aof时候redis会将每一次的函数都追加到文件中，当redis重启时会重新执行文件中的保存的写命
	令在内存中。

7、	jedis客户端  单个jedis、jedispool和jediscluster
	ApplicationContext ac = new ClassPathXmlApplicationContext("applicationContext.xml");
	RegisterDAO registerDAO = (RegisterDAO)ac.getBean("RegisterDAO");

	如果是两个以上:
	ApplicationContext ac = new ClassPathXmlApplicationContext(new String[]{"applicationContext.xml","dao.xml"});

	或者用通配符:
	ApplicationContext ac = new ClassPathXmlApplicationContext("classpath:/*.xml");
8、  	缓存要不影响正常程序的运行，先缓存后数据库,

9、   	sso实现单点登录
	spring框架中的digestutils工具类自带md5加密方法.md5DigestAsHex(byte[] bytes)

10、	跨域：不同域名，相同域名但是不同端口
11、	自增 1、uuid 2、redis.incr 3、date+random 4、mysql自增
12、	request.getRequestURL()+"?" + request.getQueryString() 获取请求路径

13、	new dateTime().plus(3).toString("yyyy-mm-dd");当前时间加3天输出

14	springboot工程搭建继承springboot 的parent
	<!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-parent -->
  	<dependency>
  	 	<groupId>org.springframework.boot</groupId>
    		<artifactId>spring-boot-starter-parent</artifactId>
    		<version>1.5.3.RELEASE</version>
  	</dependency>
	pom库直接依赖实现pom依赖

15、	invalid LOC header (bad signature) 删除maven库中的文件，重新update即可

16、	创建web后右键propertie后的可以指定deploy的路径，test webcontent一般都删掉，一般指		定src main 下的webapp，这样与deployed resources目录就一致了
17、	classes删除，启动无法加载类，右键build path 重新添加代码路径即可
18、	nginx中的config文件中一个server就是一个虚拟主机
	nginx配置以下三种方式：
	1）、ip
	2）、端口
	3)、域名 		这个是最常用的
	一个域名只能绑定一个ip，一个ip可以被多个域名绑定
	通常ip地址是和dns服务器（根据域名换ip地址）绑定一起的，
	ping www.baidu.com 拿到百度的IP地址
	
	www.baidu.com-->dns服务器---->取得对应的ip地址---->访问百度的服务器,默认的是80端口
	在host文件中，如果配置了ip对应的域名，就会跳过dns解析，进行访问
	一般大公司是可以输入ip地址访问的，但是一些小公司可能运行在同一ip的不同虚拟机上，还		是要域名访问才能精确定位。
	反向代理决定哪个服务器提供服务，最简单的比如轮询，nginx只做请求的的转发给服务器，

19、	在interceptor中取到的信息可以放进request中，再传递到controller中	   			request.setAttribute(a,b)

20.	nginx
	客户端均衡--->nginx--->tomcat 请求经过nginx转发，由tomcat处理，这样叫反向代理，多	台tomcat就叫做负载均衡（仅对httpserver如tomcat有效）

	nginx配置负载均衡：http节点下，添加upstream节点。
		upstream linuxidc { 
     		 server 10.0.6.108:7080; 
      		 server 10.0.0.85:8980; 
		}
  		2.  将server节点下的location节点中的proxy_pass配置为：http:// + upstream名			称，即“http://linuxidc”.默认的分配策略是轮询，其他暂不研究


	高可用：解决高可用的方案就是：添加冗余（备用一主一备）一般用keepalived(集群管理中实现高可用，防止单点故障),不断检查主nginx是否正常，异常就启用备用nginx，主正常，在切换回去。

21、	solr集群 
	在tomcat中需要注册zookeeperr，solrj使用CloudSolrServer参数为zookeeper的ip和port,



	zookeeper	分布式开源、服务协调服务
	主要用处	1、配置管理 2 、集群管理
	可以单击可以集群 集群比单击版多三个参数 initLimit=5 
 						syncLimit=2 
 						server.1=192.168.211.1:2888:3888 
 						server.2=192.168.211.2:2888:3888
	集群模式下还要配置一个文件 myid，这个文件在 dataDir 目录下对应上述的server.id
	

	初始三个参数为				tickTime=2000 
 						dataDir=D:/devtools/zookeeper-3.2.2/build 
 						clientPort=2181

22、	./当前目录 ../上级目录 /根路径

23、	springboot启动类的@ComponentScan一定要包括config包
	启动一定要扫描到mapper

24、	域名的分配 
	一级域名	taotao.com
	二级域名	www.taotao.com
	

25、tomcat的热部署
	1)、在tomcat-user.xml中增加配置
	<role rolename="manager-gui"/>
	<role rolename="manager-script"/>
	<user username="tomcat"  password="tomcat" roles="manager-gui,manager-script"/>

	（这样就可以登录tomcat管理者页面，在war file to deploy 进行手工热部署）

	2）、使用maven的tomcat插件实现热部署（打包-上传-热部署）
	修改项目的pom.xml文件,在<build> 节点下面增加如下配置:tomcat7的配置

	<build>
		<plugins>
			<!-- 配置Tomcat插件 -->
			<plugin>
				<groupId>org.apache.tomcat.maven</groupId>
				<artifactId>tomcat7-maven-plugin</artifactId>
				<configuration>
					<port>8081</port>
					<path>/</path>
					<url>http://192.168.25.136:8080/manager/text</url> 	//maven中tomcat7插件的默认热部署路径
					<username>tomcat</username>			   	//tomcat中配置的权限用户
					<password>tomcat</password>				
				</configuration>		
			</plugin>
		</plugins>
	</build>
	
	2)-2 run as maven install 	初次部署可以使用 "clean package tomcat7:deploy" 命令
					如果已经部署过使用 "clean package tomcat7:redeploy" 命令

					部署跳过测试：
					clean package tomcat7:redeploy -DskipTests

	




26、	run as maven build.
	测试	goals 输入 clean test

	打包	goals 输入 clean package

	打包并发送到本地仓库	goals 输入 clean install

27、	<dependency>  
            <groupId>org.myorg.myapp</groupId>  
            <artifactId>app-util</artifactId>  
            <version>${project.version}</version>  
        </dependency>  
	其中${project.version} 是一个属性引用，指向了POM的project/version的值，也就是这个POM对应的version。由于app-dao的version继承于app-parent，因此它的值就是1.0-SNAPSHOT


28、	将jquery的相关js引入到classpath下的js文件夹下，再在页面引入<script  src="js/jquery-1.8.3.min.js">，即可使用。
			最简洁的ajax使用
 			$.ajax({
		             type: "post",
		             url: "http://192.168.1.102:8081/addTalents",
		             data: {"a":"nihao"},
		             dataType: "json",
		             success: function(data){} 
		        	});
		        	
		        	
29、	ajax和js是不允许跨域请求的


30、	单点登录的主要实现方案：
							1、服务接口的开发
							2、在分布式环境中使用redis实现session共享（缓存唯一token和对应的用户信息）
							3、使用cookie在多个系统中共享。（存放token信息）
							4、拦截器的使用方法（访问校验cookie中的token是否存在或过期）
							
31、网站并发数量在1000-2000级别的，用户数量一般在百万级别
32、	redis 127.0.0.1:6379> TTL KEY_NAME 			Redis TTL 命令以秒为单位返回 key 的剩余过期时间。
33、	redis是单线程，不会设计多个线程并发的问题

34、springmvc
基本类容：
需要掌握东西：前端控制器 、处理器映射器（注解和非注解）、处理器适配器、视图解析器
springmvc注解的开发：
	1）、常用注解
	2）、参数绑定（简单类型，pojo，集合类型）
	3）、自定义参数绑定

mvc 模型视图控制器 在一次request请求的生命周期 request--->c(控制器controller)--->m模型处理（dao，service）--->返回c--->v（view）视图渲染

springmvc request--->前端控制器（dispatcherservlet接受请求和响应结果相当于转发器）--->处理器映射器（handlerMappering 根据url匹配相应的handler）--->返回一个执行链（handlerExecution包含interceptor和handler：handler处理器（平时controller），不同的handler由不同的处理器适配器(handlerAdapter：按特定规则执行handler)调用执行）--->返回modelandview到适配器再到前端控制器--->由视图解析器返回view（是个接口，支持不同的view类型）进行视图渲染

handler是需要开发的，view中的jsp也是
handler是需要实现controller接口的处理




搭建springmvc
1、在web.xml中配置前端控制器
1）、配置dispatcherServlet的url-pattern有三种方式：1、*.action 2、/ 3、/* 这种不对，当转发到一个jsp页面时，仍然会由dispatcherServlet解析jsp,不找到handler
2）、dispatcherServlet中的init-param需要指定contextconfiguration和springmvc.xml（配置handleradapter和handlerMappering等 ），默认是加载/WEB-INF/servlet名称―servlet.xml

2、在spring.xml配置handlerAdapter，所有适配器都实现这个接口，（simpleControllerHandlerAdapter，handler实现controller接口，相当于@controller，多种适配器可选）,handlerMappering所有映射器都实现这个接口，（beanNameUrlHandlermapping和simpleurlhandlermapping非注解）和视图解析器，这个是在xml中配置，配置相应的handlerbean，加入spring容器，实现路径和类的匹配，不过现在过时了，现在用的是@requestMapping
非注解，有多种handlerAapter和handlerMapping可选，还是比较麻烦的，不如用注解

spring.xml中不部配置映射器和适配器，是默认加载dispatcherServlet.properties中配置

配置注解的映射器和适配器（怎么处理这个handler，是mv还是request）：
<mvc:annotation-driven></mvc:annotation-driven>  使用这个可以代替xml中配置映射器和适配器。
annotation-driven 默认绑定了很多参数绑定方法，代替了requesrMappingHandlerMapping和requesrMappingHandlerAdapter
返回的mv是一个map，将其填充到request域中，前端页面可取值
 



@requestMapping实现方法和url的映射。、
@Controller注解，即表示改类是Handler处理器。

对标记@controller类中标记@requestMapping的方法进行映射，映射相应的url，注解版，无需再xml中配置url和handler的映射关系 

注解的处理器适配器;和注解的映射器配对使用，



使用mvc注解驱动，<context:componet-scan base-package=""></context:componet-scan>指定controller，添加进入容器

3、视图解析器，xml中配置相应的bean即可。

modelAndView的addObject（）相当于request的setAttribute方法，在jsp中取数据

springmvc和mybatis的整合：
框架层次：表现层（springmvc），业务层（spring）、持久层（mybatis）
spring将各层进整合，通过spring
管理持久层的mapper接口，通过spring管理业务层的service，通过spring管理表现层的handler

1、整合dao层：mybatis和spring整合，mapperscanner扫描
2、整合service：管理service接口，配置或标签，实现事务控制
3、整合springmvc：是spring的模，无需整合

简约版配置：
整合mybatis
1)、配置mybatis的mybatis.xml中只需要配置分页插件
2)、spring-mybatis.xml主要将dao整合到spring中，主要是将sqlsessionfactory（包含mybatis.xml和datasource）注入容器中,再将mapper扫描注入容器（实现@autowire注入）

整合spring
配置spring的事务管理：
1）、事务管理器，spring-jdbc
2）、通知<tx:advice></txadvice>
3)、<aop:config></aop:config>
 
整合springmvc
1）、组件扫描<context:componet-scan base-packge=""></context:componet-scan>扫描controller
2）、mvc注解驱动，<mvc:annotation-driven></mvc:annotation-driven>
3)、视图解析器


在web.xml中通过contextLoaderListener监听器，将各个xml整合文件加入spring容器，参数为						<context-param>
							<param-name></param-name>	
							<param-value></param-value>
						</context-param>





controller的三种返回对象：1、modelandview 2、string（需要形参model） 3、void

redirect 无法共享request return "redirect:queryItem.action" 重定向路径，同级类省略类根路径，地址栏改变
	response.sendirect("url")
	

forward 地址栏不变，共享request return "forward:queryItem.action"
	request.getRequestDipatcher("path").forward(request,response)



解决post乱码：在web.xml中配置字符集过滤
解决个体乱码：1、tomcat中     <Connector URLEncoding="utf-8" port="8080" 		protocol="HTTP/1.1"  connectionTimeout="20000" redirectPort="8443" />
	      2、new String(request.getParammeter("a").getBytes("ISO8859-1"),"utf-8")




高级内容： 

参数绑定:处理器适配器调用springmvc的参数绑定组件（converter）获取形参，执行controller
简单传入：
	1）、简单类型 @requestparam（value，required，defaultvalue） 不使用则  request传入的名称和controller的形参名需一致
	2）、pojo类型
		2I）、不使用标签，页面的name属性和形参pojo的属性name一致，使用的话应该是@modelattribute
	3）、自定义类型 pojo有日期类型，converter<T1,T2>由string转为date，需要自定义，在mvc注解驱动中增加comversion-service="beanid"，目的是在springmvc的绑定组件中注入自定义的转换类。

高级绑定：
	pojo： 传入pojo中的pojo属性：页面中name="userInfo.name"
	数组：页面中共用相同的name值即可，name="userId"，传到后台就是 Integer[] userIds
	list: userInfo中有个List<pojo> pojoList，页面name="pojoList[index].name"
	map:页面中name="userInfo['name']" -----key-value
校验：
主要是后端的服务端校验-validation校验框架，springmvc的校验框架（引入hibernate-validator-4.3.0final.jar,jboss-loggging-3.1.0.CR2.jar,validation-api-1.0.0.GA.jar）
validator需要注入适配器（配置校验器bean和返回bean，这里使用的是返回properties，个人认为是加入容器，快速读取，{}读取即可），通过mvc注解驱动注入，validator="beanname"
在形参校验的bean前加@validated 其后需要跟着BindingResult bindingResult，有一个pojo校验就需要跟一个bindingResult,形参顺序一前一后，在对bindingResult进行判断即可。
多个controller共用一个校验pojo时，pojo中可以指定校验分组，group属性group={validate1.class},校验分组是一个空接口，形参中指定@validated（validate1.class）即可


数据回显：
	使用@modelattribute回显数据，简单点的使用model回显

异常处理：
springmvc提供了全局异常处理器进行统一异常处理（唯一），是抛到前端控制器交给统一异常处理器处理  
	预期异常：
	runtimeException：

定义异常处理器，需要实现handlerExceptionResolver接口，并需要在springmvc.xml中注入
自定义的异常信息类需要继承exception类



上传图片:
tomcat的server.xml中添加虚拟目录，方便代码和图片在一台电脑上测试用	
<Context path="/helloapp" docBase="docBase="D:\web\helloapp" reloadable="true"/>
springmvc的上传功能：1、form的中增加enctype=”multipart/form-data”
		    2、 spring.mvc中需要增加multipartResolver解析器
		    3、controller中使用MultipartFile 接受处理
	 	    4、图片目录分级可以提高io能力
	            5、采用file.Transto 来保存上传的文件



json数据交互:springmvc中使用这两个标签需要引入jackson jar
请求时json串：前端需要处理转为json串，不太方便 
@requestbody 可以将json串转为java对象，形参绑定
@responsebody可以将java对象转为json串输出

public @ResponseBody UserInfo getUserInfo(@RequestBody Item item){

	return userInfo;
}

请求时key/value对象：在ajax中 data:'name=shouji&price=90';
可用@responsebody可以将java对象转为json串输出

restful支持： 
restful架构的特点：
对url进行规范，常用
非rest url http://.../queryitem?id=001&type=t01
rest url   http;//.../item/001
****实现rest访问 前端控制器需要配置/拦截****
配置/ 	那么静态资源js也会由前端控制器拦截，所以找不到，
在springmvc.xml中添加静态资源解析即可，<mvc:resources location='/js/'  mapping='/js/**'>

拦截器：
springmvc中 实现handlerInterceptor接口，基于aop机制，
1）、针对handlermapping进行拦截设置
一般不用，麻烦，需要写interceptor类，注入到指定的handlermapping中

2）、配置类似全局的拦截器，注入到每个handlermapping中,多个拦截器顺序执行
<mvc:interceptors>
	<mvc:interceptors>
	     <mvc:mapping path='/**'/>------/**表示拦截所有url包括子url，只配/*只拦截根url
	     <bean class="">
	</mvc:interceptors>	
</mvc:interceptors>


1）、prehandler(request,response,object handler)-----进入handler方法之前执行，
用于身份认证授权，
未登录，return false 拦截不向下执行，return true 表示放行

2）、posthandler(request,response,object handler ,mv)--进入handler方法之后，返回mv之前执行
应用场景从mv出发，可在此处理模型和数据

3）、afterCompletion(request,response,object handler ,mv,exeception)---执行handler完成执行
统一异常和日志处理


当多个拦截器拦截统一请求时，
I、拦截器1、2同时放行
prehandler按顺序执行，posthandler，afterCompletion按拦截器配置的逆向顺序执行
II、拦截器1放行，2不放行
拦截器1prehandler放行，拦截器2的prehandler才会执行，拦截器2prehandler不放行，1、2后续都不执行
III、拦截器1、2都不放行
执行到拦截器1prehandler return false 结束

用例1、统一日志处理拦截器，需要该拦截器prhandler一定要放行，且将它放在拦截器链中的第一个位置

用例2、登录认证拦截器，次先放在拦截链第一位置，权限检验放在其次
测试用例：1.用户请求url
	  2、判断书否是url白名单
	     拦截器拦截校验 session存在，放行，不存在，调转登录页面

	
35、	response可以修改定义的内容，比如：
	response.setChatacterEncoding("utf-8");
	response.setContentType("application/json;charset=utf-8");
	response.getWriter().writer(jsonString);


36、	可以定义一个dmo的扩展类，专门处理sql查询，方便维护。有的代码，也会抽象出dmo的参数包装对象，作为统一的参数传入。

37、	session.removeAttribute()适用于清空指定的属性   
	session.invalidate()是清除当前session的所有相关信息
	<form action="<%=path %>/custom/add!add.action" method="post">默认是get

38、mybatis
  
原生jdbc访问：
需要加入mysql连接驱动 
一般顺序，
1、加载数据库驱动 			Class.forName("com.mysql.jdbc.Driver")
2、获取数据库连接			connection
3、获取拼装预处理sql			prepareStam ent
4、执行prepareStament得到结果集		resultSet

问题存在：
1）、数据库连接，使用创建connection，不用立即释放，频繁开启关闭，影响性能 
	解决方案：使用数据库连接池

2）、将sql语句以及设置参数，获取resultSet，硬编码java代码中，维护不方便
	解决方案：sql语句和参数配置在xml文件中，resultSet转为java对象

使用mybatis

执行顺序：
配置mybatis配置文件，--》sqlSessionFactory--》sqlsession--》sqlsession内部executor执行器操作数据库--》mappedstatement（底层封装对象），存储封装，输入输出

使用mapper代理开发
未整合的mybatis使用，：
1、得到配置文件流，
2、得到会话工厂，传入配置文件
3、得到sqlsession，操作数据库
4、结束sqlsession会话    sqlsession.close（）
User user=sqlsession.selectOne("test.findUserById",id)首参=namespace.方法id,次参=传入参数
	
这里使用的是sqlsession原生封装的mapper方法，比较固定
*mapper.xml中的resultType表示单条记录映射的java对象类型
1）、#{}表示一个占位符,体现在sql上是 =？ parameters：
2）、${}表示拼接sql串，将接收到的参数内容不加任何修饰拼接在sql中，直接拼接在sql中，但是可能引起sql注入 比如：select * from user where name like '%'or 1=1 or'%'
 传入的是简单类型只能使用${value}

执行insert操作需要手动提交事务，sqlsession.commit()

主键返回：
自增主键返回

<insert id='insertObj'>
	<selectKey keyProperty="id" order="AFTER" resultType='java.lang.Integer '>-----将查询到的主键id设置到参数属性中
		select last_insert_id()
	</selectKey >
inser into user(...) values (....)
</insert>

非自增主键
先通过uuid查询到主键，将主键输入到sql中
执行uuid（）语句顺序相对于insert语句之前
使用uuid创建主键，insert之前创建uuid，
	<selectKey keyProperty="id" order="BEFORE" resultType='java.lang.String '>-----将
		select uuid()
	</selectKey >


mybatis和hibernate：技术选型，低成本，高回报为原则
hibernate:是一个标准的orm框架，不需要写sql，自动生成
应用场景：适应需求变化不多的中小型项目，比如后台管理项目

sqlsession线程不安全，除了操作数据库的方法，还有数据域属性，其最佳的应用场合在方法体内，定义成局部变量


mybatis：专注sql本身，需要自己写sql，比较灵活
应用场景：需求变化较多的项目，互联网项目

dao的开发方法：
1）、原始dao开发方法，需要写dao接口和dao实现类
思路：dao实现类中注入sessionfactory，在方法体内通过sessionfactory，创建sqlsession
interface-impl使用sqlsession操作，sessionfactory作为impl属性值，由构造函数引入，sqlsession在方法体内操作数据库

总结：I、dao接口实现类存在大量的模板方法，
      II、调用sqlsession方法时，将statement的id硬编码，sqlsession.selectOne("test.findUserById",id)
      III、调用sqlsession方法时传入变量，由于使用的是泛型，编译阶段即使变量传参类型错误，也发现不了问题

2）、mapper代理方法，只需要mapper接口（dao接口）
	I、namespace映射mapper
	II、xml中的id和mapper中方法名一致
	III、入参传参一致
总结:封装了sqlsession的方法操作
 
1、通过sqlsessionfactory得到sqlsession
2、生成mapper代理对象
   UserMapper userMapper=sqlsession.getMapper(UserMapper.class )
3、mapper方法执行，可以使用同一包装item最为入参（不推荐不灵活），也可以@param指定多个

代理对象内部调用sqlsession方法:
mapper方法返回单个pojo对象，代理对象内部就会使用sqlsession.selectOne（）
xml中也可使用加载属性文件<properties resource=''>
				<property name='' value=''/>-----先读取
			 </properties >
不要在properties元素体被添加任何属性值，只定义在properties文件中，一般定义复杂类型

4、typeAlias定义别名，mybatis扫描packsge中的po类，别名是类名resultType=“user”	
    通过mapper接口加载，mappers中的<package name="包名">
	根据mapper的返回类型，判断内部执行的是selectOne还是selectList

动态sql：1.<if test="a and b"></if>
	2.<where>可以自动去掉条件中的第一个and
	3.<sql id=""></sql>抽取sql片段,		
	引用sql片段，<include refid=""></include>若引用id不存在本mapper中，需前边追加namesapce
	4.<foreach collection="" item="" open="" close="" separator="">
		每次拼接对象
	</foreach>

5、数据模型分析
	1、分模块对每张表记录的内容进行熟悉，相当学习系统需求的过程
	2、每张表数据库重要字段的设置，非空，外键和索引
	3、数据库级别表之间的关系：**外键关系**
	4、表之间的业务关系，建立在某个业务意义基础上
	
	一对多，多对一是建立在业务的基础上

查询：
1.确定主查询表。在确定关联表
2.通过外键关联查询用户表只能查询出一条记录。可以使用内连接

<resultMap type="" id="">
	<id column="" property=""/>
	<result column="" property=""/>

	<association property="" javaType="">
		<id column="" property=""/>
		<result column="" property=""/>	
	</association>
</resultMap>
其中使用collection可以完成一对多的映射,查询出对象中的list属性

mybatis提供查询缓存：
一级缓存:sqlSession级别的缓存
一级缓存  一次存:sqlSession开启关闭
第一次查询，没有则数据库中查出并添加进一级缓存
中间如果有commit操作，则会清空全部，保证数据实时更新
第二次查，缓存中有直接获取，有commit会从数据库重新查

应用：正式开发，是将maybatis和spring进行整合，事务控制在service中，开始执行时就开启事务，创建sqlsession对象，方法结束sqlsession结束
执行两次service调用查询信息，不走一级缓存，因为session方法结束一级缓存就会清空



二级缓存:mapper级别的缓存
默认不开启，需要手动开启   usecache=false设置禁用二级缓存
多个sqlsession可以共享一个mapper的二级缓存区域（按照namespace区分）
sqlsession关闭才能将数据写到二级缓存区域，commit后都会清空二级缓存sqlsession.getMapper()，多个sqlsession之间可以跨，因为二级缓存是针对mapper的

ehcache:jvm虚拟机中缓存，速度快，效率高；但是缓存共享麻烦，集群分布式应用不方便。依赖程序  单个应用或者对缓存访问要求很高的应用，用ehcache

redis:通过socket访问到缓存服务，效率比ecache低，比数据库要快很多，处理集群和分布式缓存方便，有成熟的方案。独立的  大型系统，存在缓存共享、分布式部署、缓存内容很大

不使用分布式缓存，缓存数据在各自服务器之间单独存储，相对用的是redis或者ehcache
做tomcat的缓存共享比较消耗性能


整合方法：mybatis自带cach的接口，实现即可：
1、引入相关jar，配置mapper中的cache中的type为其实现类<cache type="">
2、classpath下配置ehcache.xml


应用场景
访问量大，实时性要求不高的才用缓存，缺点：mapper在commit后会清空缓存，缓存命中率很低



spring和mybatis整合
思路：
	1.需要spring通过单例方式管理sqlsession
	2.spring和mybatis整合代理对象，使用sqlsessionfactory创建sqlsession(spring和mybatis自动完成）
	3.持久层的mapper都需要由spring进行管理

整合过程：
	1.相关spring的jar mybatis的jar  和spring-mybatis整合jar
	2.配置sqlsessionfactory （1.configlocation：mybatis.xml和2.datasource）,存在spring-mybatis的jar中

原始dao开发（使用sqlsession操作） *****继承sqlsessiondaosupport*****    以往是通过构造方法注入
在原始的dao开发中，实现类可以继承sqlsessiondaosupport，调用this.getSqlSession()获取sqlsession操作对象 
整合spring后是交给spring管理sqlsession，无需手动关闭sqlsession，是方法级别的销毁

mapper代理开发
1.使用mapperFactoryBean可以单一添加mapper代理对象，指定mapperInterface和sqlsessionfactory（因为bean继承了sqlsessiondaosupport），单一模式不常用
2.项目中使用的是mapperscanner，扫描出mapper接口，自动创建代理对象并且在spring的容器中注入
<bean class="....mapperscannerconfigurer">
	<property name="basePackage" value=""> 扫描多个包，使用半角，分割
	<property name="sqlsessionfactoryBeanName" value="sqlsessionfactory">  
</bean>

容器启动mapper扫描会先执行，datasource配置 中，属性文件加载暂时无效，不能配置name="sqlsessionfactory" ，一般无需注意，有个印象就可以
至于mapper映射文件，属于sqlsession操作的范围，整合到sqlsessionfactory中也可以

  <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" />  
        <!-- 自动扫描mapping.xml文件 -->  
        <property name="mapperLocations" value="classpath*:dao/*.xml"></property>  
    </bean>  








在junit测试中，也可以使用new ClassPathXmlApplicationContext("classPath:spring.xml")获得applicationContext，spring的容器对象



逆向工程：
几种生成方法，一般是java工程和命令行，详见官方文档
	

39、	throw是语句抛出一个异常。
	throws是方法可能抛出异常的声明。













