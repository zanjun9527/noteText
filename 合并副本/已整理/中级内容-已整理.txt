分布式事务的相关
	方案1、	2pc两阶段提交，一般使用jta规范实现，目前开源的框架Atomikos，实现两阶段的提交，提供了事务管理器。
			第一阶段：各个server端，操作数据库先做各自的预提交，第二阶段：判断预提交都是ok的，在进行第二次的统一事务提交，若有错误，回滚全部
			使用jta规范具有强一致性，锁住了数据库的资源，比如锁住了相关的表，操作表越多锁的越多
			
	方案2、	cap理论，c一致性，a可用性，p分区容错性，而一个分布式系统最多只能满足其中的两项。
			分区容错性时分布式系统必然要面对和解决的，因此一般需要在c和a之间平衡。
			
			base理论，
				基本可用，分布式系统出现不可预知故障，允许损失部分可用性
				软状态，允许中间状态，允许一定的处理延迟
				最终一致性，类似异步mq，流量取峰，最终一致即可
	最大努力通知方案
	消息中间件mq方案
	tcc(try-confirm-cancel)两阶段补偿方案
		try阶段；完成所有业务检查（一致性），预留业务资源（准隔离性）
		confirm阶段：确认执行业务操作，只使用上阶段预留的业务资源
		cancel阶段：有一个失败，取消所有业务资源请求
			失败重试机制，
			补偿机制，比如日志，继续或回滚
	减小了系统间的锁粒度，提升并发性能，类似买票先预定，事务也是提交的，后购票。
	
	tcc和xa/jta
		前者时业务层面的分布式事务，最终一致性，不会一致持有资源锁，分布释放锁
		后者是资源层面的分布式事务，强一致性，两阶段提交的过程中一致会持有资源锁
		
	tcc开源框架：
		atomikos，tcc-transcation（推荐），spring-cloud-rest-tcc，支付宝xts
		

		
微服务系列
	事务的常用的传播属性：				当前方法必须在一个具有事务的上下文中运行，默认支持当前事务，如果被调用端发生异常，那么调用端和被调用端事务都将回滚
			1、REQUIRED 
			
			2、NESTED 			嵌套事务	如果封装事务存在，并且外层事务抛出异常回滚，那么内层事务必须回滚，反之，内层事务并不影响外层事务。如果封装事务不存在，则同PROPAGATION_REQUIRED的一样
											如果A的MethodA()存在事务，则B的methodB()抛出异常，B.methodB()回滚，如果A不捕获异常，则A.methodA()和B.methodB()都会回滚，如果A捕获异常，则B.methodB()回滚,A不回滚；
			
			3、REQUIRES_NEW					一个新的事务将启动，而且如果有一个现有的事务在运行的话，则这个方法将在运行期被挂起，直到新的事务提交或者回滚才恢复执行
		
		***包含事务的方法异常后回滚会默认被上级接收到
		***当前方法自身调用事务方法，事务会失效的，当作内部方法处理，必须重新注入interface执行，获取当前aop的代理，然后通过aop的代理调用，才能生效
		还有方法是：https://blog.csdn.net/zknxx/article/details/72585822，一般是从applicationcontext中获取代理对象
		推荐使用  <aop:aspectj-autoproxy proxy-target-class="true" expose-proxy="true"/>组合((SelfCallService)AopContext.currentProxy()).selfCallB();
		其他的就是获得容器中对象再调用，注入 或者初始化获得bean
		
	sping的事务不能回滚
		jdk，	基于接口实现，创建实现类完成目标对象的代理
		cglib	创建子类，是对目标类扩展的子类  字节码是实现，
		基于aop的代理，jdk的动态代理导致事务失效。
		jdk代理基于接口实现，创建代理类实现invocationhandler接口，1、统一的接口 2、被代理类 3、代理核心（需要注入目标类） 然后使用proxy调用，实质上是对被代理类的增强
		只有代理对象调用才能触发代理方法，目标对象调用无法触发，类似事务本身调用事务无效的场景。代理类中调用的方法a调用了代理方法b，那么b无效，此时b是目标类调用的
		代理类一次调用方法，只走一次代理，内部的方法是目标对象直接执行的，没有走代理，this.test()，目标对象调用，不走代理方法
		事务a中调用普通方法b，b中保存后抛异常，a捕获，ab都能成功，因为b中提交事务日志后异常try住，a继续即可
		<!--配置AOP proxy-target-class为true的时候是用Cglib动态代理，false的时候启用JDK动态代理-->
		<aop:aspectj-autoproxy proxy-target-class="true"/>
		
		网上有很多人说自己在SpringMVC配置的AOP不起作用。
		原因是在SpringMVC的配置文件中开启自动扫描的包和在Spring的配置文件中开启自动扫描的包一样，
		而SpringMVC的自动扫描覆盖了Spring的自动扫描(子父容器)。所以这里最好SpringMVC只扫描Controller这一层的包，其他的包交给Spring来扫描。
		
		在指定初始化方法这里我们使用了注解的方式，即指定了@PostConstruct这个注解，注意这个注解是JDK提供的，不是Spring提供的。PS：指定初始化方法我们最少有这样三种方式可以达到这样的效果。
			一：使用@PostConstruct注解；
			二：实现InitializingBean接口，实现afterPropertiesSet方法(不推荐，对代码的侵入性较强)；
			三：通过xml配置文件指定init-method的方式。
			
		
		开启事务，创建sqlsession，使用jdbc连接执行sql，最后提交事务
		client-aop动态代理-@transaction-service-@transaction提交或回滚，实质上service是被aop代理了，
		所以使用aop代理对象调用service才有事务，内部调用事务无效
		
		当@service标注的bean再容器中检查到有@transaction，则会创建一个代理对象，换句话说只有再ioc容器中，才能使用事务代理对象
		
		spring的aop的一些应用场景：事务，缓存，权限，日志，性能监控与统计，熔断
		
	springboot热部署：
		加入spring-boot-devtools，<optinal>true热部署添加,maven-plugin插件中的<fork>true
		mockmvc 模拟web测试，暂时不用
		mvc中，@valid bindingresult实现自身的参数校验
		
	
	@mapper可以用来映射xml文件，直接方法上写sql语句，配合@mapperscan使用
	自定义的starter也是可以的，
	boot的自动配置是找到meta-inf下的spring.factories的加载配置的
	String.format中是%s占位符，log中使用的是{}作为占位符
	推荐使用aspectj实现aop
		@Around(value = "test.PointCuts.aopDemo()")
		public void around(ProceedingJoinPoint pjp) throws  Throwable{
			System.out.println("[Aspect1] around advise 1");
			pjp.proceed();
			System.out.println("[Aspect1] around advise2");
		}
	boot中是内置了tomcat和jetty容器的
	springboot使用actuator实现运维监控
	java中使用的是jconsole
		
	java api的设计：
		java网管api的设计思路：http请求-servlet-handler-分发到相关的请求
		设计的其实就是相当于手工实现requestmapping功能，项目初始化的加入容器，遍历所有bean中的方法，将带有@api注解的加入map，其中其value作为key，runable（beanname，method，作为属性）对象作为value。实现路由的分发
		从context中拿到所有的bean，再完成所有的路由分发的初始化
		使用ioc的初始化 或者new对象完成内部static属性的初始化