平和心态，功利心会浮躁，慢避免以后返工，多实践

html&css基础--->巩固(渡一成哥)--->学习js


千万不要怼面试官
开发要放平心态，满就是快，避免返工

觉得写div复杂吗？  觉得复杂就检讨一下心情是不是浮躁了
嵌套就够不够，css写的会麻烦

div-div(宽度不设置，后子元素是图片定宽)
视口不能横向缩小了

div中的h字体，设置div后的字体大小优先
after伪元素中添加一个字体图标

要精准选中，否则后续还会返工修改

text-align:justify

问题   
	1.并列div float    第二div中含有li，之后不对齐 (浮动练习）  
			可以用padding修饰
	2.文字高度超过限定的div的height	
			
			hover不好测试就将浏览器的hover功能打开

			div中上下两个，其中有个中的a变成了行块，样式异常
			z-index: 1;
			div>ul>li   中ul00%宽度问题
			button的上级div都多个共同存在，能同意设置绝对定位吗?还是分开比较好
			多个公用的class  绝对定位其中一个下面的样式

前端文档   w3c  和mdn

雪碧图能缩放裁剪吗
1em  和1
腾讯课堂html和css

div 的自适应和宽度超出  图片等
浮动元素宽度适应内容

行内元素可以设置margin\padding的左右，对margin的上下不生效

问题记录
	line-height和height具体的尺寸图，区别

-------------------html-------------------  
	主要学的是元素

	html用来描述页面的结构（结构就是有哪些东西）
	二八原则，掌握常规的二，八作为扩展学习
	
	
	vscode集成了方便的emmet插件
		vscode的使用  f1:切换语言输入
		vscode-icons  
		live server  调试窗口，能够实时编译刷新
		！  直接生成标准的html文档结构  速度  /html:5 也可以
		
		Markdown Preview Enhanced   md文件增强预览

		注释键  ctrl+？
		
		
		alt+shift+f  格式化代码
		ctrl+d   	快速选中同标签
		ctrl+回车 	快速换行
		h1*6>{a}		直接6个标签就出来了,包含a内容
		lorem	乱数假文，随机生成的字符串，一般调试p段落排版用
	
	p.red.name			直接p中快捷样式
	p>{lorem3} 	<p>lorem3</p>
	p>lorem3  		<p>a b c</p>
	
	
	挺有意思的写法：
		ul*5>(li>h3>a>lorem)+(li*4>a>lorem3)
	
	***
	md:MarkDown,MD，文档格式标准，仅关注内容本身，不关注格式。这个挺好用的。效率还可以
	
	w3c,为互联网提供各种标准
	mdn：https://developer.mozilla.org/zh-CN/    web文档
	
	浏览器的组成：1.shell：外壳  2.core：内核（js执行引擎、渲染引擎）  
	常见的具备内核的浏览器：ie，firfox，chrome，safari，opera
	微信中页面显示是因为微信中安装了内核插件
	
	
	版本和兼容性，后面特殊处理
	
	<!-- 注释内容 -->
	
	html的基础单位，元素(就是常用的标签)，元素中由元素属性
	
	**
	空元素没有结束标记，比如<img>,<meta>
	 <meta charset="UTF-8">或者 <meta charset="UTF-8"/>，现在可以不写
	 
	 元素可以嵌套，但是不能相互嵌套
	 拥有同一父元素的叫做兄弟元素
	
	文档格式
		<!DOCTYPE html> 是文档的申明，h5标准
		<html> 是根元素
		<head>文档头,内部内容不会显示到页面
			<meta>文档的元数据，网页附加信息
			<body>文档体，所有要显示的都要放在文档体中
			
	*****所有元素与展示效果无关*****  语义化
		语义化，每个标签都有含义，但是显示只和css有关，元素本身和展示效果无关，元素有默认的css样式
		
		问题,想做一个空行需要p元素？，这种想法不对，应该是css决定的
		
		*****
		重要理论：选择什么元素，取决于内容的含义，而不是显示出的效果。
		
		更具内容选标签，样式交给css
		
		****
			h1是语义化，真正的大小是css赋值的
		****
	css必须要依赖元素
	
		HTML5元素周期表
		独占一行是块级元素，其他是行级元素
		元素具有语义化，没有显示效果
		块级元素，独占一行
		行级元素，不独占一行
		h5已经弃用这种说法
		
		
		
		浏览器调试页面，选中元素，然后在element.style中添加修改样式测试
		
		空白折叠，源代码中连续的空白字符，在显示的时候会折叠成一个空格
			常见文本元素
				<span> 	无语义 	仅用于设置样式
				<pre > 	 	预格式化文本元素  不会出现空表折叠，源代码展示。保持格式一致。通常用于在网页中显示代码
				<code>		代码区域，需要显示的
			
			
			html实体字符(HTML Entity)：实际上就是转义字符
				<对应的是&lt;	>对应的是&gt; 空格对应&nbsp; &对应 &amp;等等
			
			
			<a>标签
				1.普通链接		跳转普通地址
				2.锚链接		href="#id"	如果是当前页面，不会刷新;如果是其他页面页面会刷新    href="#"会跳到页头，这#相当于定位页面某个位置
				3.功能链接		比如js---javascript:等
				
				
				其中包含的任何元素都会跳转链接
				
			路径写法：
				站内资源(用相对路径)和站外资源(绝对路径)
				绝对路径和相对路径
				绝对地址：协议名://主机名:端口号/路径		
					当跳转目标和当前页面的协议相同时，可以省略协议，(当站内资源的时候，也可以相同的省略,个人小结)
					
				相对路径  以./开头，这个是可以省略的
					以./开头，表示当前资源所在目录,../表示上级目录
			
			
				图片：<img>	空元素	属性：src；alt  图片资源失效，文字替代
					和<a>元素联用，整个图片跳转链接
					和<map name="cityMap">元素连用，<img usermap="cityMap">实现局部跳转链接，map的子元素area实现定位
					和<figure>连用，包裹图片相关，不常用
					
				多媒体元素
				是h5新元素
					video	默认支持MP4,webm。
						src
						controls:控件显示,布尔属性(可以不写属性值)
						autoplay:自动播放
						muted:静音播放
						loop:循环播放
						
						子元素：source，提供给资源列表
						
					audio 和video完全一致
					
				列表元素
					有序列表 	ol,li,ol中的type设定排序取值方式
					无序列表	ul,li
					定义列表	dl,dt/dd						常用于术语的定义  不常用
				
				容器元素
				划分区域，从大到小，一块一块制作  慢慢写 不要急，(基本全都看作一个个div操作，但是也不要过分细)
					代表一块区域，用于放置其他元素，从大到小，步步精细，每个区域都要一个div划分
					div元素		没有语义，先看大盒子，然后划分小盒子，先不看样式，找不到合适的语义可以使用div
					语义化容器元素  h5新增
						header		页头/文章头
						footer		页脚/文章尾部
						article		整个文章
						section		文章的章节
						aside		附加信息，侧边栏
						nav			导航 				和ul>li类似，只能用于导航
						
						
			元素的包含关系
				mdn文档中查看包含内容，不需要背，记住常用的
			 
				以前：块级元素可以包含行级元素，反之不行，<a>除外
				
				元素的包含关系由元素的内容类别决定。
				
				1.容器元素中可以包含任何元素
				2.a元素中几乎可以包含任何元素
				3.某些元素有固定的子元素(ul>li，ol>li)
				4.标题元素和段落元素不能相互嵌套，并且不能包含容器元素
				
					  <ul>
						<a href=""><li>2</li></a>
					</ul>
					
					li>ul  li中是可以继续包含ul的。列表包含列表
				像这种写法就是不规范的，ul下面固定是li
				
-------------------css记录-------------------
			主要学的是声明，样式规则

				******
					css规则=选择器+声明块
				******
				
					选择器：选中元素				选择器选中元素
						1.元素选择器 2.类选择器(最常用) 3.id选择器
						
					声明块
						包含很多(声明)属性，即样式
					  <p class="big red">Lorem, ipsum dolor.</p>     多个样式空格分隔
					  
				css代码位置
					1.内部样式表，				书写在style元素中，放head中(希望最先加载)
					2.元素样式表(内联样式表)	写在元素的style属性上
					3.外部样式表				独立写在css文件中			<link rel="stylesheet" href="./css/index.css"> 引入		
					
					外部样式表的好处
						1.推荐使用，便于多页面公用维护
						2.有利于浏览器缓存，提高页面响应速度
						3.有利于代码分离
						
				常见样式声明：元素内部文字尺寸大小
				
				预设值,都是单词写好的，比如red,bold
					color：	字体颜色
						1.预设值，red等
						2.光学三元色(红,绿,蓝,每个颜色0-255)		rgb(r,g,b)
						3.hex表示法		16进制表示      			#红绿蓝		#008c8c      #ff4400->#f40  
						
					font-size;	
						1.px:像素绝对单位		简单理解文文字高度占多少像素，
						2.em:相对单位			相对于父元素的字体大小 最终都会换算成px值 	
							没有字体大小会默认继承父元素字体大小(html默认是16px，基准字号，浏览器设置的字号)，一层一层往上找
							每个问题都必须要有字体大小
							
						user agent，ua 用户代理，说白了就是浏览器
						
						<stong> 默认加粗
						
					fong-weight:文字粗细		预设值：normal，bold
					
					font_family:文字类型		宋体等	可设置多字体备用  sans-serif，非衬线字体
						
					font-style:字体样式，		常用来设置斜体
						<i>,<em>元素，默认斜体			<i>常用来表示一个图标
					
					text-decoratioin：	给文本加线，下划线等
						a:-webkit-any-link	any-link指的是超链接，前边的-webkit-是谷歌浏览器的前缀	Webkit枘核浏览器，如chrome and safari
						<del>表示错误的内容，就是中划线
						<s>表示过期的内容
						
					text-indent:段落首行缩进
					
					line-height：行高，每行文本的高度，该值越大，每行文本的距离越大。
						设置行高为容器的高度，可让单行文本垂直居中
						行高设置为纯数字，相对于当前元素的字体大小
						
						
						一个是元素本身，一个是两个行间隔
						其中height是指标签块的高度；元素高度
						而line-height是指元素的行高，形容的是两个元素之间的距离，line-height包括元素高度和空白的高度。
						
					width，height：宽高，元素的宽高
					
					letter-spacing；文字间隔
					
					*****
					text-align：元素内部文字的水平排列方式,设置行盒对齐方式(包括行块盒  文字、图片等)
					*****
					
				选择器
					通配符选择器
						*，选中所有元素
						
					属性选择器
						[href]/[href="aaa"]		选中所有具有href属性的元素
					
					伪类选择器  
						选中某些元素的某种状态
						hover			鼠标悬停状态					a:hover{} 悬停在a标签上的操作
						active			激活状态，鼠标按下状态			a:active{}
						link/visited：	超链接未访问/访问后状态
						
						需要按照link-visited-hover-active顺序写		按照语义化也好理解
						
					伪元素选择器（默认是行盒）
						before(after)			相当于加了个子元素before			
						<span>书名</span>		span::before{content:"《"} <span>《书名</span>
							
							
					选择器的组合
						1.并且					不加任何东西，选择器直接放一起					p.red{}
						***
						2.后代元素-空格			选中元素的后代元素(不是子元素)					div.red li{}    #id a{}
						***
						3.子元素- >				只能选择子元素									.red>li{}
						4.相邻兄弟元素- +		某个元素的下一个元素							.red+li{}
						5.兄弟元素- ~			选中某个选择的后面所有兄弟元素					.red~li{}
						
					选择器的并列
						多个选择器，逗号分隔
						
		*****层叠*****
					生命冲突，同一个样式，多次应用到同一个元素。是样式选择元素
					
					层叠；解决声明冲突，浏览器自动处理(权重计算)
					
						1.比较重要性 (基本不用考虑)
							1)作者样式表(开发者书写的样式)中的!important样式
							2)作者样式表中的普通样式
							3)浏览器默认样式表
							
						2.比较特殊性(这个比较重要)
							总体规则：看选择器，选择器选中的范围越窄，越特殊
							具体规则：通过选择器，计算一个4位数(xxxx)权重 (只要比出一个位数，就可以了)
										1.千位，内联样式计1，否则0		  内联样式(可不写选择器)占最高
										2.百位，选择器中所有id选择器中的数量
										3.十位，选择器中所有类选择器，属性选择器，伪类选择器的数量
										4.个位，选择器中所有元素选择器、伪元素选择器的数量
						
							覆盖样式：写一个样式，特殊性超过原样式，就可以覆盖了，一般不要改别人的样式代码，层叠覆盖就行
								使用场景：搞活的时候，加一个新样式文件，覆盖原样式即可，特殊性覆盖的方法
								
						3.比较源次序
							代码书写靠后的胜出
						
					应用
						1.重置样式表
							书写作者样式，覆盖浏览器的默认样式  常见的重置样式表   reset.css等
								
						2.爱恨法则，a链接   link>visited>hover>active
						
			继承
				简写属性，font  批量设置属性
				
				子元素会继承父元素的某些css属性，后代也会收到影响
				
				通常和文字内容相关属性都能被继承
				
	******属性值的计算过程(一个元素从所有属性没值，到所有属性都有值)******
			
				一个元素一个元素依次渲染，顺序按照页面文档的树形目录结构进行
			
				树形目录：html	-	head	->meta，title
								-	body	->h3,p(strong),a,img
								
				渲染每个元素的前提条件：该元素的所有css属性必须有值，最终没有的会有默认值
				
				
				*********
				 无属性值--->1.确定声明值--->2.层叠冲突--->3.使用继承--->4.使用默认值--->每个属性都有值
				 
				 
				声明值：开发者样式或者浏览器默认样式
				 
				 1.确定声明值：参考样式表中没有冲突的声明，直接作为css属性
				 2.层叠冲突：对样式表中有冲突的声明层叠规则，确定css属性值
				 3.使用继承：对仍然没有值的属性，若可以继承，则继承父元素的值
				 4.对于仍然没有值的属性，使用默认值
				 
				 
				*********
				
				案例：<div><a></div>,对div设置颜色， a元素颜色不变。在第一步就有声明值了
				
				
				使用场景，可以用来reset一些常用的元素样式
				
				inherit  强制继承，将继承提前。
				
				特殊的两个css取值
					1.inherit：强制继承
					2.initial：初始值，将该属性设置为默认值
					
					
		*****盒模型*****
				每个元素在页面都会生成一个盒子区域，  盒子是css的概念
				
				盒子类型
					1.行盒，display=inline		不换行
					2.块盒，display=block		独占一行
					
					display默认为inline。
					
					浏览器默认样式设置的块盒：div，header，p等
					常见的行盒：span，a,img
					
				盒子的组成部分，行盒和块盒都有
				
					1.内容 				content
							涉及属性：weight,height 设置的是盒子内容的宽高
							
							内容部分通常叫做盒子的内容盒，content-box
								
					2.填充(内边距)		padding
							盒子边框到盒子内容的距离
							通过padding设置，padding是简写属性。  padding ： 上	右	下	左
						
						填充区+内容区=填充盒，padding-box
					3.边框				border
					
						边框=边框样式+边框宽度+边框颜色
						border 也是速写属性
						
						边框+填充区+内容区=边框盒，border-box
						
					4.外边距			margin
						
							边框到其他盒子的距离
							
							margin速写属性
					
			盒模型的应用
					1.改变宽高范围
						默认情况下。width和height设置的是内容盒宽高。但是设计的时候往往是边框盒
							1.精确计算，计算好精确数值
							2.css3：box-sizing,指定是边框盒尺寸，现在用这个多点
							
					2.改变背景覆盖范围
						默认情况下，背景覆盖边框盒，可以通过background-clip进行修改，不包括margin
						
					3.溢出处理
						overflow，控制内容溢出边框盒后的处理方式
						
					4.断词规则
						word-break,会影响文字在什么位置被截断换行
						
						normal：cjk字符，文字阶段，非cjk，单词位置截断		默认
						break-all，截断所有，所有字符都在文字处截断
						keep-all，保持所有，所有文字都在单词之间截断
						
					5.空白处理
					
					单行文本文字省略号处理
						wihte-space:nowrap,空白位置处理时不换行
						overflow：hidden
						text-overflow：ellipsis
					
			行盒的盒模型
					常见的行盒：包含具体内容的元素		span，img，em等
					特点：
						1.盒子沿着内容延伸	
						2.行盒不能设置宽高		
						3.内边距			水平方向有效，垂直方向仅影响背景，不会实际占据空间
						4.边框				同内边距
						5.外边距			同上
						
						
					调整行盒的宽高，通过字体大小、行高、字体类型间接调整
				
				行块盒
					display：inline-block
						1.不独占一行，2.盒模型中所有尺寸都有效
					
					使用场景：常用来做分页
					
				空白折叠：发生在行盒内部或行盒(包含行块盒)之间
				
				可替换元素和非可替换元素
					非可替换元素：大部分元素，页面上显示的结果，取决于元素内容
					可替换元素：页面显示结果取决于元素属性。	img  video		类似行块盒
					
					img 中的object-fit  是图片显示属性，保持比例等
					
					
		*******常规流*******属性计算，盒模型 是三大部分
				盒模型：规定单个盒子的规则
				视觉格式化模型(布局规则)：页面中的多个盒子排列规则
				
			******大体上排列三种规则(浮动和定位)******
				***1.常规流 (也叫文档流等)
						所有元素，默认情况下，都属于常规流布局
						*****总体规则：块盒独占一行，行盒水平一次排列*****
						
						包含块(containing block):每个盒子都有包含块。决定了盒子的排列区域
						绝大部分情况下，盒子的包含块是其父元素的内容盒(不包含padding)
					
				
						块盒
							1.每个块盒的总宽度，必须刚好等于包含块的宽度
								宽度的默认值是auto，将剩余空间吸收掉。
								margin取值也可以取值auto，默认是0。
								width吸收能力强于margin
				
								计算完之后，最后的剩余空间被margin-right吸收
								常规流块盒居中，盒子定宽，margin-right  和 margin-right   都为auto，就水平居中了( margin: 0 auto;)
				
							2.每个块盒垂直方向上的auto值
								height：auto     适应内容的高度
								margin:auto			表示0
								
							3.百分比取值
								******
									padding,宽，margin可以取值百分比,以上所有百分比是相对于包含块的宽度
								******
									
									
									包含块高度是否取决于子元素的高度，设置百分比无效
									...不取决于子元素的高度，自定义，百分比有效
									
							外边距合并，两个常规流块盒，上下外边距相邻，会进行合并，两个外边距取最大
							但是中间隔东西就合并不了
							
				***2.浮动元素
						应用场景：	
							1.文字环绕
							2.横向排列
							
							
							*****浮动元素,宽度auto，适应内容，内容过多会撑开，样式混乱，最好设置宽度*****
					
						基本特点：display会强制变为block，块盒
							1.修改float属性：	left(左浮动，元素靠上靠左)  right(右浮动，元素靠上靠右)  默认是none
							2.浮动元素的包含快和常规流一样，是父元素的内容盒
						
						浮动盒子尺寸：1.宽度为auto，适应内容宽度，没有内容就是0，不会像常规流一样吸收尺寸，默认0
									  2.高度为auto，和常规流一致，适应内容宽度
									  3.margin 为auto时，为0，其他值是生效的
									  4.边框，内边距，百分比设置和常规流一致（相对于包含块的宽度，高度特殊点）
	
	
						浮动盒子排列
							1.左浮动，元素靠上靠左
							2.右浮动，元素靠上靠右
							3.在包含块中排列时会避开常规流，反之常规流块盒，无视浮动盒子
							5.行盒在排列时会避开浮动盒子(这个就是环绕的原理，块盒会默认添加行盒)
								如果文字没有在行盒中，浏览器直接生成了一个行盒包裹文字(匿名行盒)，比如div中的文字
								环绕间隔 设置float元素的margin，因为是围绕float，
							6.外边距合并不会发生
	
					******高度坍塌******
						根本原因：常规流盒子的自动高度，计算时无视浮动盒子
						解决方式：清除浮动：clear(left，right),必须出现在之前所有(左/右)浮动盒子的下方，排列时参考浮动盒子
									1.最后加空div，clear样式，不方便,
									2.使用伪元素，：after	，谁高度坍塌就加在哪
										.clearfix::after{
											content:"";
											display:block;  默认是行盒
											clear:both；
										}
									添加常规流盒子，撑开父div
						
			******定位******
				position：	默认static,静态定位(不定位)，不是static，就是一个定位元素
							relative:相对定位
							absolute:绝对定位
							fixed：固定定位
							
				定位元素会脱离文档流(相对定位除外)
				脱离文档流的元素:
					1.文档流中得元素摆放时，会忽略脱离了文档流得元素
					2.文档流中元素计算自动高度时，会忽略脱离了文档流得元素

					相对定位：
						不会导致元素脱离文档流，只是让元素在原来位置上进行偏移，(盒子偏移不会对其他盒子造成任何影响)
						通过left,right,top,bottom偏移
						
					绝对定位：
						1.宽高为auto，适应内容
						2.包含块变化：找祖先元素的第一个定位元素，该元素的填充盒为其包含快(找不到就是整个网页，初始化包含块)
						3.
						
						场景：将一个元素设置relative，这样子元素可以使用绝对定位达到相对的效果。
						给决定定位元素提供包含块
						
					固定定位：其他情况和绝对定位完全一致
						包含块不同：固定为视口(浏览器的可视窗口)，浏览器尺寸大于视口就出现滚动条
						
				定位下的居中
					1.定宽高 2.将四个方向距离设为0  3.将四个方向的margin设为auto           因为margin也是占据盒子空间的
					绝对定位和固定定位中，margin为atuo，会自动吸收剩余空间
					
				多个定位元素重叠时：
					设置z-index,通常情况下，值越大，越靠近用户。
					只有定位元素设置z-index有效，可为负数(遇到常规流和浮动会被覆盖)
				补充：
					绝对、固定定位元素一定是块盒，一定不是浮动，没有外边距合并
					
					
					
					
					
	常规流练习
			复杂的页面，一块区域的写，html和css写完一个区域再写另一个
			body中的article body宽度就不要设置了，article设置百分比就可以了，父元素的内容盒是其包含块
			尽量将行高等属性往上提，整体把控，默认浏览器字号是16px
			子元素的外边距可以超出
			div不写宽度适应内容
			
			两个初始的父子元素紧靠，没有border宽度的情况下，可能会出现外边距(外边距为0也合并)合并，解决方案：设置父的padding
			
			中间隔着border就不会合并了
			
			选择器尽量精确的查找
			
			段落之间空一行 一般是1em，行号是字体的大小，上下段落，自动合并外边距
			
			min-width    最小宽度  保证最小显示宽度，再小就滚动条
			
			section*5>(h2>{章节$}+(p*3>lorem))
			
	浮动练习
		1.横向排列   2.文字环绕      li也可以横向排列
		
		只在需要横向排列的元素上使用浮动
		
		浮动元素自适应超范围问题
			浮动元素宽度会默认被内容撑开，所以一般设置子元素的宽度，这样不会影响浮动显示
			浮动元素默认宽度不能超过父元素的宽度范围，否则换行排列，设置宽度即可换行
		浮动元素宽度适应内容
			单行文本垂直居中：line-height=父盒子height
			行盒上下设置margin无效
			
			**********
				尽量写的精确些，后面好补充
				写样式的，范围从上到下，依次缩小范围，实现层叠覆盖.main{}--->.main .nav{}--->.main .nav a{}
			**********
			
			
			制作一个三角符号(注意这里width不写就是默认铺满，为0就指定了属性)
				.ddd{
					    border: 15px solid;
						width: 0px;
						height: 0px;
						border-color: transparent transparent pink transparent;
				}
				//注意这里的伪类位置，不能写成 .main .nav a.selected a::after  空格是代表子类
				//注意这里相对的是上个定位元素，.main .nav a.selected{position: relative}
				.main .nav a.selected::after{
					content: "";
					display: inline-block;
					border: 5px solid;
					width: 0px;
					height: 0px;
					border-color: transparent transparent pink transparent;
					position: absolute;
					left: 27px;
					top: 16px;
				}
	
		一般div的宽度设定，高度自动撑开
		这种常规的通用设置一般放再reset.css中
			ol,ul{
			list-style: none;
		}
		
		浮动都要解决高度坍塌的问题，否则会依次影响上级的高度坍塌，在浮动元素的父元素加上样式即可
				.clearfix::after{
						clear: both;
						display:block;
						content: "";
				}
				
		 border-radius:   倒角处理
		 nth-child(),选中第几个元素
		 
		 浮动元素不设置宽度就会铺满父级元素，最好是给父级设置宽度，这样控制显示
		 *****只要使用浮动，父元素建议加上clearfix*****
		 高度为0，高度坍塌,该元素需要加上clearfix样式
		 
		 text-align: center;是相对包含块而言的，，行盒居中都可用这个
		 
		 浮动哪个就加上float，整体浮动，和分开浮动不一样
		 
	定位练习
			单行文本水平居中，line-height=包含块height
			li中还可以包含div等元素
			指定box-sizing: border-box; 这样调整样式不会影响其他的元素，居中，border宽度可能要微调line-height
			
			捕捉移入动作的样式显示 追加的方式定位
			.header .topnav>li:hover .submenu{
				display: block;
			}
			
			常用在设置一体色
			.header .topnav>li:hover::after{} 追加选择
			
			div紧临浮动会环绕，如果是隔着一个块盒会换行
			
			弹出层
				主div作为透明背景(fix 铺满视口定位)，中间的居中定位
				宽高定好就好居中了， left，top，bottom，right 都设置为0(这是冲突的)，然后margin设置auto自动吸收居中
				.tanchu{
					position: fixed;;
					width: 100%;
					height: 100%;
					background: rgba(0, 0, 0, 0.5);
					left: 0;
					top: 0;

				}
				.container .main{
					width: 404px;
					height: 521px;
					margin: auto;
					background-color: #fff;
					position: absolute;
					left: 0;
					top: 0;
					bottom: 0;
					right: 0;
					box-sizing: border-box;
					padding: 1em;
					border-radius: 6px;
				}
				
			轮播图
			
			
				div宽度=图片的宽度
			   宽度不够就会换行  float 是仅靠的，没有空隙， 常规流可能会空白折叠然后导致换行
			   
			   文字是可能超过div宽度的，图片也是
			   
			   div宽度的是可能被内部元素超过宽的，典型的就是文字...处理，图片也可以
			   
			   单行文本垂直居中：line-height=高度
			   
			   有重叠的元素基本使用绝对定位，找到希望参照的元素设置成相对定位(第一个有效)
			   float时候，高度为auto可能会坍塌，定高了一般不会，ul li 是自动高度
			   
			  行块盒适应行高，将li排列显示
			   
			   
			   想要不撑开父显示，使用边框盒子，超过margin为负数
			   
			   ******点可以ul-li  也可以backgroud变为圆，是元素画成小点，可以float也可以行块盒显示******
			   
			   
			   
			   
			   *****绝对定位中，垂直方向居中  上下为0  margin 左右为auto*****
			   做蒙层，使用rgba实现半透明，
			   
			   步骤：1.根据图片显示宽度，将元素宽度都计算好，定好banner(宽度为图片宽度)，img元素float处理，然后主banner的div溢出隐藏。
					 2.切换图片，切换-margin-left的图片宽度，就相当于向左移动位置了，相当于定banner宽度显示，图片左右拉动切换
					 3.左右使用 &lt;  &gt; 文字输入就可以了
					 4.到边停止，每次移动一个图片宽度
					 5.点点可以li浮动，也可以行块盒
					
				实例：
					<script type="text/javascript">
						function rightaa(){
							var leftvalue=document.getElementById("imgsaa").style.marginLeft;
							if(leftvalue==''){leftvalue=0;}
							if( parseInt(leftvalue)==-1040){return;//到边停止}
							document.getElementById("imgsaa").style.marginLeft = parseInt(leftvalue)-520+'px';
						}
						function leftaa(){
							var leftvalue=document.getElementById("imgsaa").style.marginLeft;
							if(leftvalue==''){leftvalue=0;}
							if(parseInt(leftvalue)==0){return;//到边停止}
							document.getElementById("imgsaa").style.marginLeft = parseInt(leftvalue)+520+'px';
						}
					</script>
										 
					 
					 
			更多的选择器
				更多的伪类选择器
					first-child		选中第一个元素   比如li:first-child    必须是li元素，且是第一个子元素
					first-of-type		li:first-of-type  选中子元素中第一个li元素
					last-child
					nth-child			a:nth-child(5)   必须是a元素，且是第五个元素    2n偶数even   2n+1奇数odd
					nth-of-type
				
				更多的伪元素选择器
					first-letter		选中元素中第一个字母
					first-line
					selection			框选文字
					
			更多的样式
			
				独立css文件中，相对路径 是相对css文件而言的
				
				背景默认覆盖边框盒
					透明度
						1.opacity   整个元素的透明度(包含了子元素)    值0-1
						2.颜色位置  设置alpha通道(rgba)  比较常用
					
					鼠标
						cursor 设置样式
					
					盒子隐藏
						1.display:none   不生成盒子   可能会影响其他盒子的样式
						2.visibility：hidden   生成盒子，任然占据空间，只是视觉上不显示
					
					背景图
						img 是 html的概念/背景图是css的概念
						
						1.当图片是网页内容，必须使用img元素
						2.图片仅用于美化页面，必须使用背景图
						
					
					
						涉及的css属性
							background是速写属性
							
							background-imgage   	图片地址     :url("pic_path")	
							background-repeat		默认repeat  可no-repeat
							background-size			contain-保持比例，完整显示  cover  还可以百分比、数值等
							background-position 	设置图片位置，还可以预设值(left...),数值，百分比
							background-attachment	控制背景图是否固定，可以相对于视口
						雪碧图(spirit)
							使用background-position移动到左上角，然后窗口缩小到相同大小显示，截取出图片
						
							
				
					 
					背景图练习	
						量图工具：pxcook
					
						ul-li 或者nav-a
						位置/横 纵撑满
						***速写属性 background: url("../pic/war_nav-bg.jpg") no-repeat 0 0 /100% 100%;***
						
						样例 background: url("../pic/banner1.jpg") no-repeat left top/auto 100%;
							这里div定高，设置宽度是auto，就会等比例高度优先铺满，宽度自适应，剩下的用background-color覆盖

						
						
						速写属性  border: 1px solid #red
						float元素最好定宽高，这种一般设置边框盒，防止超尺寸.也防止高度坍塌，ui一般容易坍塌
							float定宽，否则不铺满了吗
						
						绝对定位时：水平居中 left: 0;right: 0;margin: auto;
						
						a标签变成inline-block后可以设置宽高，a元素也可以设置背景图的
						加上边框后的尺寸变化 可以使用边框盒，使用outline 是外边框，不占据尺寸
			

						******margin 0 auto  这是常规流******
						
						行盒居中：设置外部text-align:centre   设置margin属性需要转为行块盒(会有空白折叠)
						
						背景图，定长宽div，然后移动到区域再微调
					 
					 
					 父 height为自动 子元素浮动会有高度坍塌
					 
					 浮动要浮动精确的位置，尽量细，浮动的参考是其包含块。所以浮动同一<div class="item"> 不要太细，意思就是浮动同级元素，实现横向排列
			   
					像 .menu a  这种就选的太广了，导致后面使用a出现了样式问题，所以些样式除非通用的，其他要尽量精确选中范围
			   
			   
			iframe元素	
				通常用于再网页中嵌入另外一个页面
				
				使用iframe的name属性关联，在<a>中的target属性跳转	、
				是将a跳转到iframe页面进行展示，不同的a定向同一个iframe元素
					
				可嵌入元素
					1.通常是行盒
					2.通常显示的内容取决于元素的属性
					3，css不能完全控制其中的样式
					4.具有行块盒的
					
			flash
				object元素引入
				embed
				都是可替换元素
				
				MIME:一般用来标记网络资源类型
			
		*****表单元素*****
			是一系列元素，用于手机用户数据
				
			input元素
				type属性
					type:text
					type:password
					type:date 日期选择框，兼容性问题
					type:search,搜索框，兼容性问题
					type:number 数字输入框
					type:checkbox 多选框
					type:radio 单选框
					
				value:输入框的值
				placeholder：提示，文本框没内容时显示
				单选多选框使用name分组
				
				
				input元素可以制作按钮
				当type值为reset、button、submit，input表示按钮
			
			select元素
				搭配子属性option使用，可以使用
				optgroup分组显示，label属性显示名字
				
			textarea元素
				文本域，多行文本框
				有placeholder属性
				
			button元素
				<button>中可以写文字 图片等元素，比input灵活
					type:   button/submit/reset  默认submit
				
			配合表单元素的其他元素
				label 
					通常配置单/多选框使用  for属性定位id  或者整个包起来
					用的还可以
					
					
				datalist
					不常用，也有兼容性问题
					数据列表
						不会显示到页面，通常用于和普通文本框配合
					
					datalist>option   使用i-input>list关联
					
			
			*****form*****
				整个表单元素，name绑定提交
				只绑定元素的name提交
				
				
			fieldset元素
				表单分组显示
				使用legend显示标题
				
			表单状态
				readonly，
				disabled	这个值是不会传递的
		
		美化表单元素
			使用span或者div做圆
			outline 不会象border那样影响元素的尺寸或者位置
			outline是不占空间的，既不会增加额外的width或者height
			outline 的效果将随元素的 focus 而自动出现
			
			不同浏览器可能默认outline样式不一样，所以一般手动重置下，需要将outline-offset重置为0
			
			tableindex 实现tab切换顺序
			新伪类
				:focus		聚焦样式
				:checked	框的选中样式       input:checked+label  选中下一个兄弟元素
				
			重置表单元素样式  就常规的input等初始样式
				
				
			
			textarea	resize 调整外部尺寸

				调整文本框到内容的距离
					1.padding
					2.text-indent  首行缩进
				
			
			单选，多选样式
				.classa.classb  且样式
				label中能加span input 不能加div
				行盒不能设置宽高，块盒独占一行
				
				改变选中样式
					增加span，选中的的下一个元素(input:checked+label)，使用after添加自定义选中样式。最后在隐藏原样式               ~是所有
			
			
			
			表单练习	
				划分尽量细点
				默认文字超出h2是显示的  设置h2高度，搭配下边框实现文字中间划线的效果
				
				input 铺满父div 使用100%，文本框可以用设置高度
				
				浮动元素最好设置好宽高
				
				下拉框的样式，可以用div显示
				
				两个计算好的宽度，撑满，增加border后可能导致换行，需要指定边框盒
				
				边框圆角 四个角都可以设置
				
				position: absolute;
				z-index: 1;
				
				 max-height: 150px;  搭配 overflow: auto;  实现溢出滚动条
				 
				 想要同意设置按钮样式就已开始就设置好
				margin上下为负数 可以缩短两个div之间的距离
				
				
				label中不能有div
				
				为了设置span的宽高，需要转为行块盒
				
				********
				想要自定义选框的样式，在框元素同级后面再添加一个元素即可，然后用after去添加样式
				 .form .readme  input:checked+.checkbox::after
				********
				
				width:100%  撑满包含块
				
				
				*****
				可以先将 .a>.error样式隐藏，当.a.b同时出现将.error样式显示
				.a.b .error{display:block}快速切换  这样可以操作.a.b下的多个错误样式
				*****
				
				disabled  也是一个伪类
				
				input  button 是inline-block
				
			
			
		表格元素
			一般用在后台管理系统
			前后台应该是分开的，用户和管理员，一般不要混在一起
			表格不再使用网页布局，嵌套多，渲染速度过慢
			 <table>
				 <caption></caption>			标题
				 <thead>						表头
					<tr><th></th></tr>
				 </thead>					
				 <tbody>						表格主体
					<tr><td></td></tr>
				 </tbody>				
				 <tfoot></tfoot>				表尾
			 </table>
			 
			 每行就是一个<tr>,tr-th 是标题单元格，tr-td是普通单元格
			 
			 table中的单元格间隙(边框折叠方式)：border-collapse:collapse    取消边框间隙
			 
			 合并单元格
			 被跨的那个单元格要删除
				跨列 	<td colspan="5">	向右跨
				跨行	<td rowspan="5">  	向下跨
			
		其他元素
			元素周期表
			<b>			加粗  一般用css实现
			<br>		文本中换行，纯文本换行
			<meta>		description、keywords等网站基本说明
			<link>		链接外部资源(css 图标)
				rel 	链接资源和当前网页的关系
				type   	mime类型，链接资源的mime类型  可以不写
				
				
			其他的不常用，后面用到再说
			
			
	css进阶
		@规则(css指令，css语句)
			1.import
				@import "路径";					导入另外一个css文件，
			
			2.charset
				css使用的字符编码				需放在第一行				@charset “utf-8”,一般有中文才需要写
			
		web字体和图标
			以前可以使用背景图做小图标
			
			方案1.雪碧图  2.字体图标
			
			web字体，解决用户电脑上没有安装相关字体的问题(强制下载，会影响速度)
				@font-face   制作一个新的字体
				
			字体图标
				iconfont.cn  可以项目中生成引用代码，可以在线引用，也可以离线引用
				<i>  一般用来做图标  直接引用   i.iconfont.icon-ditu   可以设置大小和颜色
				引入方式   元素的class="iconfont 特定样式"
				
				一般建议时在线调试，最后调试好了之后，将图标统一下载到本地。这样可避免频繁下载
				
			
	 ***块级格式化上下文*** bfc  后面遇到在理解把，目前没有实用
			创建bfc的元素会避开浮动元素
			它是一块独立的渲染区域，规定了该区域中，常规流块盒的布局
			
			常规流盒子 默认宽度撑满
			
			绝对定位会脱离常规流
			
			overflow：hidden 设置了bfc
			
			
			常规流块盒的特点
				1.常规流块盒在水平方向上，必须撑满包含块
				2....在包含块的垂直方向上依次摆放
				3....若外边距无缝相邻，则进行外边距合并
				4....自动高度和摆放位置，无视浮动元素
				
			根元素，浮动和绝对定位，overflow不等于visiable的元素会创建bfc区域
				不同的bfc区域，他们进行渲染时互不干扰
				创建bfc的元素，隔绝了它内部和外部的联系，内部渲染不会影响到外部
				
				
				绝对定位和固定定位，即使父元素创建了bfc，也不会自动计算高度
				
			具体规则；	1.创建bfc的元素，他的自动高度需要计算浮动元素				这个可以解决高度坍塌(浮动和绝对定位,会改变排列方式,不推荐,overflow:hidden 也可以)
						2.创建bfc的元素，他的边框盒不会与浮动元素重叠				有点像文字环绕的样式
						3.创建bfc的元素，不会和它的子元素进行外边距合并				不同的bfc外边距不会合并
			
		
		
		布局
			overflow：hidden   常规流盒子，创建了bfc，避开了浮动盒子
			自适应(不定宽)
			
			两栏布局
				左float，右overflow：hidden 
			三栏布局
				左右float 中间创建bfc。线浮动，后中间。(中间自适应)
				也可以绝对定位，先写中间两边留空，然后左右绝对定位
				
			等高
				1.css3弹性盒
				2.js控制
				3.伪等高，左height很大，magin-bottom为负数，main设置clearfix,设置container超出隐藏
			
			后台页面布局
				固定定位的包含块是视口
				使用固定定位全视口，这样不用翻页，适应窗口，然后绝对定位header，main区域设置padding
				1.固定全视口container，绝对定位header，main铺满视口，使用padding
				
				
				相对定位没有脱离常规流，所以下方div还是会换行(原位置)
				
				常规流在后，无视绝对定位元素
				背景覆盖边框盒
				
				padding会改变盒子尺寸，可以设置为边框盒
				
				overflow：auto 超过高度，出现滚动条(区域滚动)   也可以创建bfc
				
			浮动细节
				1.左浮动	靠上靠左;右浮动，靠上靠右
				2.浮动盒子顶边不得高于上一个盒子的顶边
				3.若剩余空间无法放下浮动盒子，则下移直到空间足够，再向左或右移动
				
			行高的取值	
			
			多行文本， 设置数值不要加单位
				1.px像素值
				2.em，百分比			相对当前字体大小，但是，是先计算像素值，然后再继承
				3.数值					先继承，再计算
				
				
			扩展-body的背景，
				一般开发不遇到(一般body尺寸100%,不出现横向滚动条)
				一般背景覆盖边框盒
					画布
						1.最小宽度为视口宽度
						2.最小高度为视口高度
						
					html元素的背景
						覆盖画布
						
					body元素的背景
						1.html有背景，body正常(背景覆盖边框盒)
						2.html没有背景，body背景覆盖画布
						
					画布背景图	
						1.背景图的宽度百分比，相对于视口(正常相对元素的边框盒)
						2.背景图的高度百分比，相对于网页高度
						3.背景图的横向位置百分比，预设值，相对视口，纵向是相对网页的高度
					
				
			行盒垂直对齐
				多个行盒垂直方向上的对齐，注意是行盒，多行盒对齐，是相对父元素的基线
					给没有对齐的元素设置vertical-align
						1.预设值 	middle等
						2.数值		正负px 是相对基线移动的
				
				图片底部白边
				设置font-size为0 文字看不见，影响了基线等显示，
					图片的父元素是一个块盒，高度自动，图片底部和父元素底边之间出现白边
						1.设置block即可，取消行盒对齐
						2.设置父元素字体大小为0
						
			扩展-字体参考线
				font-size,line-height,vertical-align,font-family
				
				font-size
					字体大小，设置的是文字的相对大小
					文字顶线到底线的距离，是文字实际带线啊哦(content-area，内容区)
					行盒的背景，覆盖content-area
			
				行高
					顶线向上延伸一个gap空间到top，对应下面的bottom，top到bottom就是行高
				
				vertical-align
					决定参考线：font-size，font-family，line-height
						一个元素若子元素出现行盒，该元素内部也会产生参考线
						默认子元素和父元素的基线对齐
						
					数值：相对于基线的偏移量，上正下负
					百分比: 相对于基线的偏移量
					行盒组合起来，形成多行，每一行区域叫做line-box
				
					line-box
						是文字内容的必要内容
						 以下情况不生成行框
							1.元素内没有任何行盒
							2.元素字体大小为0
							
					可以换元素和行块盒的基线
						图片：基线位置，位于图片的下外边距
						表单元素：基线位置在内容底边
					行块盒
						1.最后一行有line-box，用最后一行的基线
						2.内部没有行盒，用下外边距作为基线
						
			堆叠上下文
				是一块区域，由元素创建，规定了区域中的内容在Z轴上的先后顺序
				
				创建堆叠上下文的元素
					1.html(根元素)
					2.设置了z-index数值的定位元素(非auto)
					
				同一个堆叠上下文中元素在z轴上排序
					1.创建堆叠上下文的元素背景和边框
					2.级别为负数的堆叠上下文
					3.常规流非定位块盒
					4.非定位浮动盒子
					5.常规流非定位行盒
					6.任何z-index是auto的定位子元素，以及是0的堆叠上下文
					7.级别为正的堆叠上下文
					
				堆叠上下文相互独立，是一个整体
					
					
		扩展-svg
			可缩放的矢量图，不常用
			
			数据链接
				data_url，将目标文件的数据直接书写到路径位置
				语法：data:MIME;编码,数据
				
				base64: 将二进制数据，用一个可书写的字符串表示 
				base64会增加体积
				
		浏览器兼容性
			厂商前缀			
				谷歌 		-webkit-
				ie 			-ms-
				opera   	-o-
				firefox  	-moz-
				
				比如 border-box			可以添加多个厂商前缀的border-box
				box-sizing：border-box	
				-webkit-box-sizing：border-box
				-ms-box-sizing：border-box
				满足层叠关系
				
				*****
					vscode中可以用使用autoprefixer插件 编辑厂商前缀，
				*****
				浏览器处理样式或者元素时：当遇到无法识别的代码时，直接略过
			
				1.谷歌浏览器的滚动条样式
					实际开发中使用自定义滚动条，往往使用div+css+js实现
					
				2.多个背景图中选一个作为背景
				
			css hack
				根据不同的浏览器(主要针对ie)，设置不同的样式和元素
					ie中，css的特殊前缀
						还是使用层叠覆盖
						*属性，兼容ie5-7
						_属性，兼容ie5-6
						属性值\9，兼容ie5-11
						属性值\0,兼容ie8-11
						属性值\9\0，兼容ie9-10
						
						ie5-7的外边距bug，浮动元素左外边距翻倍
						
					ie中条件判断
						ie中能识别<!--[if IE]>  <![endif]-->  10以后废弃了
						
			常见做法，常见兼容性问题思路
				渐近增强 
					先适应大部分浏览器，然后针对新版本浏览器加入新样式
					先避免写有兼容性的问题代码，完成之后再逐步加入新标准中的代码
				优雅降级
					先制作完整的功能，然后针对低版本浏览器特殊处理
					书写代码时，先不用特别在意兼容性，功能完成之后，再针对低版本处理样式
					
			caniuse
			caniuse.com
				查找css兼容性
			
	***********
		行盒本身没有高度，适应文字高度
		宽度比margin吸收空间能力强
		
		浮动元素暂时不管，目前用margin调整
		子元素的包含块是父元素的填充盒
		
		居中总结
			水平居中
				1.行盒(行块盒)水平居中
					直接设置行块盒的父元素：text-align:center
					
				2.常规流块盒水平居中
					定宽 margin:0，auto
					
				3.绝对定位元素的水平居中
					定宽，left0，right0，将左右margin设置为auto
				
					实际上fixed定位是绝对定位的特殊情况
					
			垂直居中
				1.单行文本垂直居中
					line-height等于整个区域的高度
					
				2.行块盒(或者块盒)内多行文本垂直居中
					没有完美方案
					设置上下padding相同，达到类似效果，但是缺点是高度不固定
		
				3.绝对定位的垂直居中
					定高，top0，bottom0,设置上下margin为auto
		
	***********
	
		样式补充
		行盒高度和字体大小有关
		浮动精确调整margin
		行块盒有空白折叠
		
		行盒在定宽中排列，会依次，不够宽就换行
		
			display:list-item
				本质上还是一个块盒，但同时会附带另一个盒子。主盒子-次盒。水平排列，先次后主  类似ul>li
			
			涉及的css属性	
				1.list-style-type
					设置次盒子中的内容的类型，可以继承
					
				2.list-style-position
					次相对主的位置
					
				清空次盒子
					list-style:none
					
			图片失效时的宽高问题
				img链接失效，img元素和普通行盒一样，无法设置宽高
				设置为行块盒或者块盒
				
			行盒中包含行块盒或者可替换元素
				行盒高度与上面两个无关，(高度和字体大小有关),块盒会把a元素高度撑开。a,span
				将其变成行块盒或者块盒即可
				
			text-align:justify
				除最后一行外，分散对齐。平均分布空白
				
			制作一个三角形状
				1.图片
				2.字体图标
				3.用一个元素：实质就是  div 的宽高为0，设置border宽度，然后border-color 设置透明transparent
				
			direction，writing-mode	
				前者：开始到结束的方向
				后者：文字书写方向
				显示顺序，不常用。类似古文写诗
				
				
			utf-8字符
				用编码后的16进制字符在网页显示
				
				&#x8881,伪元素中是\8881
			
			
	实战
		渡一-袁进-实战-css+h5项目实战
	****************分区域，先自己做好，然后记录问题，再看视频，再对比方案****************
		知识在于运用，那就是项目
		1.重视项目
		2.摆正心态	
			慢学快用,写页面也是，从小到大，局部慢做，分区域，从局部做起，渐渐完成
			先整体，后局部(重点),局部做起，渐渐完成。
			******将目标细化，不要想着大而全。******
		3.独立完成
			分模块，先自己做，然后再看视频总结。
			******先自己做好，然后记录问题，再看视频，再对比方案，总结******
		4.完成页面的顺序
			一般是从上到下
			头部，热门，页脚，其他区域
			
			
			
			
			
		开始
		
			问题: 1.首页中 怎么删除h1中的文字显示  2.横向排列的方式  3.合并放大镜
						1方法：1.h1下的a中文字，设置对应的a的display:none  2.设置height为0，然后padding-top，再over-flow:hidden
						2.优先使用浮动
						3.重置input的样式，然后用一个div样式包含input+图标
		
		
				backgroud 背景图的缩写属性设置  大小图的设置读取    left top/463px 20px
			
			宽高都是针对内容盒
			reset中 重置h1(有自定义margin)，
			实现横向排列	 1.浮动 2.行块盒处理(li不太好处理)    优先选择浮动
			
			
			截屏大小和实际值不一致，需要将显示中比例调成100%
			
			背景图覆盖边框盒，
			
			用form将input包含主(input+button)，回车提交就可以提交
			
			:placeholder 可以设值样式
			
			重置input元素的样式,input{border:none；outline:none；outline-offset:0}}
			
			使用nav 直接横向列表
			
			可以将公用的样式统一起来
			
				1.网站图标，先再head中找link，没有就再根目录下的favicon.ico。然后再link:favicon进来
				
				样式结构分离
					引入公用的reset.css 和common.css,顺序是reset-common-特定css，也可将公用css import进特定css中
					可以先空着common.css，然后写样式，最后将多个页面的公用样式整理起来
			
					使用字体图标可以暂时直接使用在线导入的方式，后续再考虑下载本地
		
				引入css  1.link  2.css中 @import "//at.alicdn.com/t/font_2009509_j9vnukzd35.css"
				
				样式中的代码多打注释
				
				
			元素浮动起来变成块盒，并排显示
			可以将float  ringt 和left 都统一集中起来  放common中，子需要再class中放left中即可
			
			先把selected样式写好，后面js控制即可
			
			对于定宽的盒子，加了border的像素值，就要考虑使用边框盒子
			
			text-indent 缩进，可以预留空间，长度超出会有显示问题，一般用padding
			
			input和div中包含两个，最好是大的包含移动块
			
			对于倒角的背景，超出的颜色 over-follow：hidden
			
			浮动部分的样式，先解决高度坍塌
			
			下拉框选项可以使用div中的ul<li实现
			
			公用的样式抽出来写
			
			****
			想要优雅的限制浮动的位置，外层包一个div即可
			****
			
			可以单独做一个login页面，然后iframe嵌套进来
			
			在写样式的时候，自上而下，已经写好的样式你在前面插入一个div会独占一行，把原来的会挤下去,因为浮动会避开常规流，反之无视
				
				
			#edf4ed 这颜色挺浅的
			
			行盒的对齐方式 ，可以font-size 或者 行块盒
			
			行级一般是不可放div的，比如span 可以去cdn查看可包含内容
			
			元素的包含块是填充盒，不是边框盒
			
			对于图片是展示默认大小的，设置width:100%,可以将其铺满父div中
			
			h3标题默认是块盒，可设置成inline 都可以设置
			
			li中可以放置div的，列表中换行的 break-all
			
			对应相同的样式，可以考虑在同一个父级下写公用的样式。比如左右浮动，直接写在common中即可
			
			使用一个清楚浮动，可以让后面的浮动元素不受上面的影响，应为上面有一个空的div常规流盒子
			
			行块盒，实现一行显示，但是有空白折叠
			
		父div定宽，子li行块盒定宽显示，会换行
		
		line-height 一般是设置成数值  1.5等
		
		行盒垂直方向的对齐使用vertical-align
		
		浮动没到边，一定是两边被其他元素挡住了
		
		*******
		背景覆盖边框盒，想要覆盖margin 可以用父元素的背景覆盖
		*******
		
		横向排列，1浮动 2行块盒
		
		对于图片的显示控制，先设置外层宽高，然后img铺满width即可
		
		换行显示 块盒独占一行
		
		高度固定优先使用浮动
		
		字体图标就是使用了before
		
		绝对定位元素一定是块盒
	
		一般更在元素后面的一个可变位置的情况，可以使用after伪元素实现
		a.new::after{
			content:"";
			back：url()
			width:;
			height:;
		}
		
		li直接浮动，父元素clearfix,然后就能横向排列了
		li中放div，li中也可以放div
		li>a<img，需要设置li的宽度，否则会使用img原始宽度，设置宽度，高度按比例缩放
		
		先设置li的宽度，然后设置img的width是100%
		
		div>li，定div宽，然后定li宽，然后浮动，局部横向排列
		豆瓣打分就是一张星星的雪碧图
		隐藏元素中的信息，display: none;
		
		设置雪碧图 要设置宽高，需要设置成inline-block
		
		行块盒本身就是bfc
		
		设施overflow:hidden  设置成bfc会自动避开浮动元素