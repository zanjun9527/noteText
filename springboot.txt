springboot-171 开始boot 的web开发

https://docs.spring.io/spring-boot/docs/2.1.1.RELEASE/reference/htmlsingle/   boot官方文档


1、springboot的中的配置文件：目前看 @Configuration 和 @bean是搭配使用的

2、annotationconfigapplicationcontext作为容器，接受一个配置类作为参数

3、@configuration声明当前类时一个配置类，相当于spring的xml文件
   @bean注解在方法上，声明当前方法返回一个bean，方法名就是返回的bean名称

4、在spring容器中，只要容器中存在某个bean，就可以在另一个bean的声明方法的参数中写入，入参中
		@Bean
		public A (B b){
			return a;
		}
	这里b实际上是容器中的一个bean

5、在spring中使用@after等都可以定义一份advice，执行切面程序

6、spring中的作用域 scope      singleton 管理的同一个bean实例

7、springboot中可以导入xml文件，也可以注入属性文件 @propertySource  但是还要配置个propertySourceplaceholder的bean
   @PropertySource直接注入属性文件，直接注入属性文件，别的地方可以直接@value

8、ApplicationContextAware，使bean可以获得spring容器中的服务

	boot创建jsp文件的时候把后缀加上

	boot中使用jsp
	1、启动类继承SpringBootServletInitializer
	2、相关的maven依赖，关键<artifactId>tomcat-embed-jasper</artifactId><scope>provided</scope>，使用外部的tomcat实现
		<artifactId>spring-boot-starter-tomcat</artifactId> <scope>provided</scope>
	3、需要新建webapp文件夹，然后再添加web-inf/jsp文件夹，打war，部署tomcat访问
	
	
	jsp不能用Application.java的main方法启动，只能用Tomcat启动，并且要打war包，所以修改打包方式为war：<packaging>war</packaging>
	在src/main/下创建webapp文件夹，在webapp文件夹下创建WEB-INF文件夹，如图：
	
	日志中可以使用的字符串的拼接方法
	System.out.println(String.format("我的名字叫%s", "小明")); // 打印:我的名字叫小明  
	
	可以自动一xml文件的模板

9、@conditional标签，根据特定的条件控制bean的创建

10、springboot想要使用自己的前端控制器，可以自己定义，一般默认使用的即可
    @Bean  
    public ServletRegistrationBean dispatcherRegistration(DispatcherServlet dispatcherServlet) {  
        ServletRegistrationBean reg = new ServletRegistrationBean(dispatcherServlet);  
        reg.getUrlMappings().clear();  
        reg.addUrlMappings("*.html");  
        reg.addUrlMappings("*.do");  
        return reg;  
    }  

11、@responsebody共jason和xml格式的返回，具体的需要在@requestmapping produces属性中指定 

12、springboot中开启spring mvc的使用
	1、继承webmvcconfigureradapter，重写相关的配置方法，
	2、必须使用@enablewebmvc开启springmvc的支持，
	3、添加拦截器 WebMvcConfigurationSupport或上面的webmvcconfigureradapter，重写addInterceptors方法添加自定义的拦截器
	4、项目中需要很多地方使用仅页面转向功能，直接使用addviewcontrollers添加即可

	
	spring boot默认选择禁用后缀模式匹配
	需要开启spring.mvc.pathmatch.use-suffix-pattern=true
	配置/       路径是 /aaa      aaa.htm不进
	配置*.htm   路径是 /aaa      aaa.htm进



13、	1.http://start.spring.io/  快速创建工程   官网的模板下载
	2.自定义banner的地址：http://patorjk.com/software/taag
	3.使用Spring Tools Suite，其中使用spring stater project创建工程boot工程，是属于eclipse的一个插件
	4.单纯的简历maven工程，添加boot的parent依赖，添加相关的简化配置
	5.使用idea创建boot工程，使用spring initializr

14、	springboot启动类中的核心注解@springbootapplication,开启自动配置，是一个组合注解，boot会扫描该注解所在类的同级包和下级包下的bean，建议放在pom中的groupid+artifactid下的包下
    	Application启动类放的位置不对，要将Application放在最外层，也就是要包含所有子包。


15、application.properties中的关键属性配置：
	server.port=8080
	server.contextPath=/haha

16、虽然boot提倡零配置，但是某情况下需要使用到xml文件，@ImportResource({"classpath:spring-dubbo.xml"，"classpath:spring.xml"})

17、	boot中也可以使用@configurationproperties，指定前缀prefix（必须指定到根节点,server.tomcat.uriEncoding,前节点实际是静态的内部类）和location（1.4版本后取消了，默认原始的applications），将属性文件和bean的属性关联起来，在将该对象注入容器使用即可，避免@value多次，但目前看不怎么实用
	@EnableConfigurationProperties 在没有使用@Component等注解时使用@ConfigurationProperties,这时需要开启配置


	@ConfigurationProperties作用在方法上，属性注入，需要配合@bean	
	@Bean
    	@ConfigurationProperties(prefix = "account")
    	public AccountProperties accountProperties() {
        	return new AccountProperties();
    	}


18、	boot的多环境	application-dev.properties   在application.properties中指定spring.profile.active=dev具体的属性文件

19、	@EnableAutoConfiguration  启动自动配置 在autoconfigure包下  原理就是 其中使用了多个类似@conditonal的注解，满足条件自动配置，可以自己建立自动配置实现的，	********暂不研究，后续有需要再看*******

20、	实现mvc的相关配置,	WebMvcConfigurationSupport 与WebMvcConfigurerAdapter 都可以配置MVC,WebMvcConfigurationSupport 支持的自定义的配置更多更全，WebMvcConfigurerAdapter有的WebMvcConfigurationSupport 都有
	mvc.pathmatch.use-suffix-pattern: true #启用这个之后， server.servlet.path配置后缀才会生效。(mvc配置拦截路径)
	  

21、	属性文件中的属性在自动配置的包下是有规定的，以规范的前缀为约定

22、	spring提供的事务机制提供了一个platformtransactionmanager，不同数据访问实现不同的接口即可
	使用@EnableTransactionManagement开启@transactional注解标签，可以同时在类或者方法上实现，针对public方法开启
	
23、	springboot 注册 servlet、filter、listener
	1、@configuration配合@bean标签，通过ServletRegistrationBean、 FilterRegistrationBean 和 ServletListenerRegistrationBean 获得控制。
	2、在 SpringBootApplication 上使用@ServletComponentScan 注解后，Servlet、Filter、Listener 可以直接通过 @WebServlet(urlPatterns = "/test/*")、@WebFilter、@WebListener 注解自动注册,这些注解都是JDK的，无需其他代码。
	
	方法二： 
	1）写一个WebMvcConfig类继承WebMvcConfigurerAdapter 
	2）使用@EnableWebMvc，@Configuration注解 
	3）写一个filter的初始化方法，用@Bean注解 
	4）写一个FilterRegistrationBean的初始化方法，用@Bean注解，在初始化方法中配置之前的filter。 
	代码见后文。

	interceptor：实现WebMvcConfigurerAdapter，或者WebMvcConfigurationSupport可以注册interceptor，
				新版本实现WebMvcConfigurer，addInterceptors方法添加自定义的拦截器即可
	过滤器一日游
	servlet-get过滤器一日游
	myinterc prehandler
	myinterc posthandler
	myinterc aftercompletion
	
	拦截顺序时filter-servlet-interceptor
	
	
	
	
	静态资源映射：同上

	boot中配置静态资源ResourceHandler后，静态资源路径不会再进入拦截器了。

24、	mybais的配置还是建议使用代码配置，数据源 jndi和jdbc的配置可以参考小秘书的配置
	spring.datasource.type 连接池类型 boot 默认是  HikariDataSource

	JDBC连接数据库的两种方式：DriverManager及DataSource     可以使用三方数据库连接比如druid等



24、	@Component可配合CommandLineRunner使用，在程序启动后执行一些基础任务。程序初始化相关
		ApplicationRunner也可以，这个可以获取更详细的命令行参数

25、	springboot建议是用freemaker，jsp不推荐（页面可以编写java代码，前后端分离不推荐），不需要加载成class文件，技术更新
		
		使用jsp，还要加入tomcat-embed-jasper依赖，还要创建webapp目录，不推荐  https://segmentfault.com/a/1190000012263699


26、	redis目前建议使用，bean启动的加载方式，不使用默认的配置方式
		@ComponentScan 如果不设置basePackage的话 默认会扫描包的所有类

27、	boot是可以整合swagger的，但是代码侵入，不建议

28、	类继承SpringBootServletInitializer，实现war包部署tomcat

	public class ServletInitializer extends SpringBootServletInitializer {

	@Override
	protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {
		return application.sources(XyeManagerApplication.class);
	}

	}

29、	@EnableScheduling开启boot的定时任务


30、	使用junit测试文件类
	@RunWith(SpringJUnit4ClassRunner.class)
	@SpringApplicationConfiguration(classes = SpringBootSampleApplication.class)，新版的用@SpringBootTest代替
	@WebAppConfiguration

31、	使用https配置
	1、需要一个证书，可以自己生成或者购买。下面是我们通过keytool自己生成。 生成一个PKCS12格式的叫做keystore.p12的证书
	生成命令： keytool -genkey -alias tomcat -storetype PKCS12 -keyalg RSA -keysize 2048 -keystore keystore.p12 -validity 3650

	2、在application.properties中配置HTTPS

	server.port:8443
	server.ssl.key-store: classpath:keystore.p12
	server.ssl.key-store-password: aqjcpt
	server.ssl.keyStoreType: PKCS12
	server.ssl.keyAlias: tomcat
	这就完成了SpringBoot的HTTPS协议配置，重新启
	

32、spring-boot-maven-plugin 插件可将工程打成一个fat jar，直接java -jar 执行即可，和普通的maven打包相比，除了classes下内容，还包含lib，和boot的一些jar启动的类
	spring-boot-maven-plugin(打的jar包是可直接java -jar  name.jar执行)
		1.只在独立运行的模块(启动项工程，如provider)pom中添加,
		2.作为jar依赖的项目Module不要引入该插件。(不需要有启动类，也不需要执行)
		3.不要定义在聚合工程父pom.xml(或者使用maven-compiler-plugin也行)，否则每个子模块都要启动main class，否则mvn install报错。父pom不需要<build>

    spring-boot-maven-plugin原因：因为这个插件会重新打包(repackage),打包成spring-boot可通过-jar形式运行的jar或war包，并且把原来maven打包重名称成.war.original结尾





----------springboot实战----------

设计特点
	1、自动配置
	2、起步依赖，比如只需要引入如web的一个依赖即可，直接关联相互兼容的版本jar，方便，一般只需要指定顶级的parent版本，其他的不care，
		起步依赖具有传递依赖的特性，无需指定版本，boot已经进行了相关的优化，各版本之间是相互兼容的，版本由boot的版本决定，同时决定了后续依赖的版本
	
	
	maven总是会用最近的依赖，那么重新depend后就可覆盖传递依赖的版本


社区版idea安装spring assistant，才能创建boot项目


@SpringBootApplication开启了组建扫描和自动配置，是一个组合注解包括下面的信息

@SpringBootConfiguration
@EnableAutoConfiguration		根据项目中依赖的jar，开启自动配置
@ComponentScan

关于自动配置：boot在启动时，都要做类似，thymeleaf在不在classpath下，在就配置一个模板解析器，视图解析器，模板引擎，类似的判断
在springboot中的spring-boot-autoconfigure包是boot的自动配置包，默认读取class下的资源配置
自动配置的重点，classpath下有，就自动配置，一般通过起步依赖加当class下



boot推荐基于java配置优于xml

maven总是会用最近的依赖，也就是谁，你在项目中的构建说明文件增加该依赖，会覆盖传递依赖引入另一个依赖，比如引入了两个不同版本的jar，优先近的依赖
 springboot中的logback日志需要默认文件的名称是logback.xml，也可以通过logging.config指定具体的名称
记载的优先顺序是logback.xml--->properties--->logback-spring.xml，一般用后者，不行用前者，区别在于是否使用属性值


使用Thymeleaf实现mvc，遵循默认的原则
Thymeleaf
根据默认原则，静态资源应放置在src/main/resources/static下
根据默认原则，页面应放置在src/main/resources/templates下


boot默认是不推荐jsp的，内嵌的tomcat不支持jsp,集成jsp需要引入相关的maven依赖，需要创建webapp的文件夹，打成war后在外置的tomcat容器运行
再idea中，maven依赖进来了，但是引不了相关类，进入模块projectstructure中发现jar has broken path  点击进入属性移除后重新更新即可


dubbo的xml文件还是@importresource导入

@Conditional意思是只有满足一些列条件之后创建一个bean。  条件注解

new 对象中的属性，@autowire是不能注入的，因为没有走容器获取，只有从容器中才能拿到注入的对象。比如在拦截器中注入的service对象，这时只能将拦截器加入容器，从容器中获取

部署tomcat的步骤：
	1、项目设置成war
	2、将springboot-starter-tomcat的范围scope设置为provided，时打包时将改包排除，因为放独立的tomcat中时不需要的
	3、启动类继承SpringBootServletInitializer ，这样在tomcat下没有web.xml也能运行，具体的启动类在org下的相关类中
	重写@Override
	protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) {
		return builder.sources(applicationClass);
	}
	设置启动类，用于独立的tomcat的入口
	在拥有 @SpringBootApplication 注解的类中，使用 SpringApplication 的 run 方法可以通过JAR启动项目。
	继承 SpringBootServletInitializer 类并实现 configure 方法，使用 application 的 sources 方法可以通过WAR启动项目
	
	spring-boot-starter-web 包含了 Spring MVC 的相关依赖（包括 Json 支持的 Jackson 和数据校验的 Hibernate Validator）和一个内置的 Tomcat 容器，这使得在开发阶段可以直接通过 main 方法或是 JAR 包独立运行一个 WEB 项目。
	而在部署阶段也可以打成 WAR 包放到生产环境运行。
	
	实际部署，将war拖到webapps下，只保留一个root的空目录，解压到root下，删除war即可


	====================netpay boot ==========================
	普通的是在webapp下部署的，但是boot的本地是直接在xye-netpay-boot/target/classes/下运行的
	file:/C:/Users/xiaoyuer/git/xye-netpay/xye-netpay-pom/xye-netpay-boot/target/classes/

	然后lib 和web-inf下的文件貌似是取的webapp下的工程目录，比如jar 和静态文件。

	====================netpay war ==========================
	使用的ParallelWebappClassLoader，context: xye-netpay
	file:/D:/apache-tomcat-8.5-pay/webapps/xye-netpay-war/WEB-INF/classes/


	<!-- 本地boot运行环境 ,生产是war，在tomcat下运行，使用的是以上的资源文件，boot本地直接运行target/classes-->
	<!-- 导致boot在target下加载不到文件  原先是tomcat启动没有影响。记得测试war后真实加载的目录 -->


springboot中的自定义配置：
	，影响自动配置的：1、显式覆盖 2使用属性进行精细化配置
	  @ConditionalOnMissingBean，是覆盖自动配置的关键，存在相应的就会降低自动配置的优先级。
	  springboot的设计是：加载应用级配置，随后再考虑自动配置类
	  
	  
	  
	  @ConfigurationProperties一般需要@EnableConfigurationProperties开启支持，但是后面boot的自动配置已经加上了，所以一般也可以不显示开启

boot中的多环境配置
	application.properties
	application-{profile}.properties
	spring.profiles.active=dev 开启默认的profile属性
	
	目前看还是maven的多环境比较合适，不会存在多个问题
	
	也可以自定义error页面放在templates下，
	
	自定义了log配置以后，简单的配置也需要<appender name="STDOUT">,否则控制台不会打印日志
	
	spring的mockMvc测试框架，可以不需要容器运行就测试mvc，仅此而已，知道即可。
	
	<property name="logbackpath" value="../logs/"></property> springboot的jar启动，当前的位置就是jar的位置

	

Spring Boot 可以通过 @PropertySource,@Value,@Environment, @ConfigurationProperties 来绑定变量，

Spring Boot 可以兼容老 Spring 项目，使用@ImportResource注解导入老 Spring 项目配置文件。


配置数据源可以使一个new DruidDataSource 返回
JndiObjectFactoryBean bean = new JndiObjectFactoryBean(); 		jndi
DataSourceBuilder 							普通数据源

@ConfigurationProperties 使用方式有两种 
1、在类上使用该注解 
2、在工厂方法上使用该注解 （@bean）

@Bean("sakilaDataSource")
    
@ConfigurationProperties(prefix = "spring.datasource.sakila")
    
public DataSource libraryDataSource() {
        
return DataSourceBuilder.create().build();
    
}


在同一个configuration中
@bean中引用另一个bean
1.bean(),直接调用方法拿到一个bean，(被@Bean注解的方法会被Spring重写，多次调用会返回同一个Bean对象)
2.在入参中直接引入springbean，类型-名称,前提是在同一个configuration中



boot中的yml格式也挺好用的有提示，空格区分，:后面需要加上空格，配置mybatis也可以，mvc相关等

freemarker和Thymeleaf语法，两种不同的模板引擎，语法不同，前端显示而已，从语法习惯上来讲，更推荐freemarker


spring.freemarker.template-loader-path=/WEB-INF/template,     最后必须要加","  不然访问不到   这个需要精确到ftl的文件位置.


boot的默认的配置mybatis和datasource，基本配置
idea文件乱码，先切换到对应的编码，再convert(应该是读取文件内容，并以IDE本身指定的encoding来进行解读)


开启job，启动类@EnableScheduling， service方法上@Scheduled(cron="*/6 * * * * ?")  很方便



spring-boot 热加载

热部署：动态替换你修改的class，效率会更高。
热启动：修改代码保存时会自动重新启动项目

热部署
使用 Spring Loaded
当系统通过 mvn spring-boot:run启动或者 右键application debug 启动
（系统监视classes文件，当有classes文件被改动时，系统会重新加载类文件，不用重启启动服务）



使用 spring-boot-devtools
1.增加依赖，
2.plugin中添加
<configuration>
	<fork>true</fork> <!-- 如果没有该配置，devtools不会生效 -->？
</configuration>
3.File -> Settings -> Compiler，勾选 Build Project automatically
4.按快捷键Ctrl+Shift+Alt+/，选择1.Registry..---->勾选 compiler.automake.allow.when.app.running 即可

scheduledExecutorService  对应的几个job定时整理






Spring boot项目通常情况下有如下几种启动方式：统一的入口就是启动类
	通过主类启动。
	通过spring-boot的maven插件spring-boot-maven-plugin方式启动。   		spring-boot:run
	通过可执行jar/war包方式启动。						jar启动				
	通过Servlet容器启动，如Tomcat、Jetty等。








jasypt加密用
@Scheduled  没有持久化功能 
@Async就是实现了异步开线程执行


boot中使用jsp
	https://www.cnblogs.com/zs-notes/p/9365705.html
	需要这三个依赖，更重要的是必须将创建webapp目录，下面创建WEB-INF,然后放文件进去使用，还是使用老板的webapp结构
	若不借助任何模板引擎的话，JSP页面放在resources目录下（包括缺省的几个子目录）是访问不到的！
	<artifactId>javax.servlet-api</artifactId>    
	<artifactId>jstl</artifactId>
	<artifactId>tomcat-embed-jasper</artifactId>***
	
	
	jsp视图文件应该放在webapps下，使用模板引擎，js、图片等静态资源文件才是放resources
	1.想放到resource下必须使用模板引擎，	
	1.直接放在webapp下，以前的使用方法
	2.可以借助模板引擎，或者META-INF实现，路子比较野，不常用


	server.servlet.jsp.init-parameters.development=true  实时更新


boot中使用https
	springboot https http   这个也没啥 直接搜索配置即可，生产通过nginx实现https到http的转发,使用到TomcatServletWebServerFactory开启http
	本身属性文件中添加ssl证书相关
	

异常信息
	server.error.path=/error.htm   这是默认的异常路径

	boot freemarker中默认前缀是/，所以资源路径要设置到精确的位置。可以server.error.path=/error.htm 控制异常路径 ，搭配ErrorController使用

	ErrorController可对全局错误进行处理，但是其获取不到异常的具体信息，例如对自定义异常的处理

	@ControllerAdvice可对全局异常进行捕获，而404这样不会进入控制器处理的异常不起作用，可搭配@ExceptionHandler使用

	RestControllerAdvice	  相比增加了json返回



cookiet相关
	独立的 Tomcat
修改配置文件 context.xml ，指定 CookieProcessor 为 org.apache.tomcat.util.http.LegacyCookieProcessor，具体配置如下：
	<CookieProcessor className="org.apache.tomcat.util.http.LegacyCookieProcessor" /> 
	<Context>

SpringBoot 内嵌 Tomcat 的解决方式
在 springboot 启动类中增加内嵌 Tomcat 的配置 Bean，如下代码：
	//tomcat版本升级，An invalid domain [] was specified for this cookie
	@Bean
	public WebServerFactoryCustomizer<TomcatServletWebServerFactory> cookieProcessorCustomizer() {
		// lambda写法,暂时不用
//		return (factory) -> factory.addContextCustomizers((context) -> context.setCookieProcessor(new LegacyCookieProcessor()));

		return new WebServerFactoryCustomizer<TomcatServletWebServerFactory>() {
			@Override
			public void customize(TomcatServletWebServerFactory factory) {
				factory.addContextCustomizers(new TomcatContextCustomizer() {
					@Override
					public void customize(Context context) {
						context.setCookieProcessor(new LegacyCookieProcessor());
					}
				});
			}
		};
	}





启动方式
		基本常规使用,
		SpringApplication.run(SpringBootApplication.class, args)

		自定义SpringApplication
		通过SpringApplication API调整
			SpringApplication springApplication = new SpringApplication(SpringBootApplication.class);
			springApplication.setBannerMode(Banner.Mode.CONSOLE);
			springApplication.setWebApplicationType(WebApplicationType.NONE);
			springApplication.setAdditionalProfiles("prod");
			springApplication.setHeadless(true);

		通过 SpringApplicationBuilder API调整
				new SpringApplicationBuilder(SpringBootApplication.class)
				.bannerMode(Banner.Mode.CONSOLE)
				.web(WebApplicationType.NONE)
				.profiles("prod")
				.headless(true)
				.run(args);


静态资源
	1.虽然SpringBoot默认的静态资源地址是resources下的static，但是他只限存放文件，即如果你在static下直接放css样式是可以访问的，
	但是为了管理，我们一般都会在static下新建文件夹，如css，js等分类。这样的话就会出错了，因为SpringBoot不会访问到static文件夹下的子文件夹。
